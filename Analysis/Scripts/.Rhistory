ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 1))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 0.6))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "Pecks per Minute", xlab = "Pigeon",
main = "Pigeon Response to Good and Bad Paintings", ylim = c(0, 0.6))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
?t.test
bacteria = c(23.8, 26.2, 27.9, 22.2, 24.4, 25.8, 25.6, 29.1, 26.6, 26, 24.9, 23.3)
bacteria_t = t.test(bacteria, mu = 24, alternative = "two.sided")
bacteria_t
e^(-0.1 * 5)
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggdag")
install.packages("fixest")
### load libraries
library(tidyverse) ## for basic coding
library(data.table) ## for data manipulation
library(knitr) ## for rmarkdown
library(ggdag) ## for making a directed acyclic graph (DAG)
library(fixest) ## for fixed effects models
library(lme4) ## for regression models
### get rid of scientific notation
options(scipen = 999)
library(tidyverse)
library(vegan)
library(ggpubr)
library(broom)
library(AER)
library(lme4)
library(MatchIt)
library(fixest)
library(mgcv)
library(gratia)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
flowercounts = read_csv("../Scratch/blacksand_flowercounts_2020.ar.data.csv")
geumexclusions = read_csv("../Scratch/blacksand_geumexclusions_2020.ar.data.csv")
geumindividualvisits = read_csv("../Scratch/blacksand_geumindividualvisits_2020.ar.data.csv")
topography = read_csv("../Scratch/blacksand_topography_2020.ar.data.csv")
visitors = read_csv("../Scratch/blacksand_visitors_2020.ar.data.csv")
snowmelt = read_csv("../Scratch/snowmelt.csv")
snowdepth_raw = read_csv("../Scratch/black_sand_snow_depth.cf.data.csv")
# Clean snowmelt data to match pollinator data -----
names(snowmelt) = c("LTER", "site", "year", "treatment", "subplot", "melt_doy")
snowmelt$site = case_match(snowmelt$site, "East_Knoll" ~ "EastKnoll", .default = snowmelt$site)
snowmelt$subplot = case_match(snowmelt$subplot, "C"~"E", "B"~"C", .default = snowmelt$subplot)
# Clean snowdepth data ------
snowdepth = snowdepth_raw %>%
setNames(c("site", "treatment", "subplot", "distance_from_top", "date", "depth", "comments")) %>%
filter(treatment != "", !is.na(treatment), depth != "NaN") %>%
mutate(
subplot = case_when(
subplot == "Top" ~ "A",
subplot == "Topmiddle" ~ "B",
subplot == "Middle" ~ "C",
subplot == "Bottommiddle" ~ "D",
subplot == "Bottom" ~ "E",
.default = NA
),
site = ifelse(site == "East_Knoll", "EastKnoll", site),
doy = yday(date),
treatment = factor(treatment),
depth = as.numeric(depth),
year = format(as.Date(date, format="%Y/%m/%d"),"%Y")
)
gam_model <- gam(
# treatment is included as an "additive factor" to account for varried intercepts (overall deeper snow in treatment v control)
depth ~ s(doy, by = treatment) + site + treatment + year,
data = snowdepth,
method = "REML"
)
summary(gam_model)
# non linear gam model to assess the relationship between doy and depth under "null" conditions (treatment not included in model)
gam_null <- gam(
depth ~ s(doy) + treatment + site + year,
data = snowdepth,
method = "REML"
)
summary(gam_null)
# anova demonstrates that the model where treatment is allowed to affect depth ~ doy spline is better than null model
anova(gam_model, gam_null, test = "Chisq")
# data frame for fitting values
newdata_all <- expand.grid(
doy = seq(min(snowdepth$doy), max(snowdepth$doy), length.out = 100),
treatment = levels(factor(snowdepth$treatment)),
site = levels(factor(snowdepth$site)),
year = snowdepth$year
)
# predict fitted values
newdata_all$fit <- predict(gam_model, newdata = newdata_all, type = "response")
# plot values.
ggplot(newdata_all, aes(x = doy, y = fit, color = treatment)) +
geom_line(size = 1.1) +
facet_wrap(~site) +
labs(title = "Predicted Snow Depth over Day of Year",
subtitle = "Split by Site and Treatment",
x = "Day of Year", y = "Predicted Snow Depth (cm)") +
theme_minimal()
gam_model <- gam(
# treatment is included as an "additive factor" to account for varried intercepts (overall deeper snow in treatment v control)
depth ~ s(doy, by = treatment) + site + treatment ,
data = snowdepth,
method = "REML"
)
summary(gam_model)
# non linear gam model to assess the relationship between doy and depth under "null" conditions (treatment not included in model)
gam_null <- gam(
depth ~ s(doy) + treatment + site ,
data = snowdepth,
method = "REML"
)
summary(gam_null)
# anova demonstrates that the model where treatment is allowed to affect depth ~ doy spline is better than null model
anova(gam_model, gam_null, test = "Chisq")
# data frame for fitting values
newdata_all <- expand.grid(
doy = seq(min(snowdepth$doy), max(snowdepth$doy), length.out = 100),
treatment = levels(factor(snowdepth$treatment)),
site = levels(factor(snowdepth$site))
)
# predict fitted values
newdata_all$fit <- predict(gam_model, newdata = newdata_all, type = "response")
# plot values.
ggplot(newdata_all, aes(x = doy, y = fit, color = treatment)) +
geom_line(linewidth = 1.1) +
facet_wrap(~site) +
labs(title = "Predicted Snow Depth over Day of Year",
subtitle = "Split by Site and Treatment",
x = "Day of Year", y = "Predicted Snow Depth (cm)") +
theme_minimal()
ggplot() +
geom_point(data = snowdepth, aes(x = doy, y = depth, color = treatment), alpha = 0.2) +
geom_line(data = newdata_all, aes(x = doy, y = fit, color = treatment), size = 0.5) +
facet_wrap(~site) +
labs(title = "Observed vs Predicted Snow Depth",
subtitle = "GAM Predictions with Raw Data",
x = "Day of Year", y = "Snow Depth (cm)") +
theme_minimal()
ggplot() +
geom_point(data = snowdepth, aes(x = doy, y = depth, color = treatment), alpha = 0.2) +
geom_line(data = newdata_all, aes(x = doy, y = fit, color = treatment), size = 1.1) +
facet_wrap(~site) +
labs(title = "Observed vs Predicted Snow Depth",
subtitle = "GAM Predictions with Raw Data",
x = "Day of Year", y = "Snow Depth (cm)") +
theme_minimal()
View(snowmelt)
snowmelt = snowmelt %>%
left_join(topography, by = c("site", "subplot", "treatment"))
View(snowmelt)
snowdepth = snowdepth %>%
left_join(topography, by = c("site", "subplot", "treatment"))
View(snowdepth)
snowdepth = snowdepth %>%
left_join(topography, by = c("site", "subplot", "treatment")) %>%
filter(site != "Soddie")
head(snowdepth)
snowmelt = snowdepth %>%
group_by(site, subplot, treatment, year) %>%
mutate(
melt_doy = ifelse(any(depth == 0), min(doy[depth == 0], na.rm = T), min(doy))
)
View(snowmelt)
snowmelt = snowdepth %>%
group_by(site, subplot, treatment, year) %>%
mutate(
melt_doy = ifelse(any(depth == 0), min(doy[depth == 0], na.rm = T), min(doy))
) %>%
ungroup()
snowmelt <- snowdepth %>%
mutate(year = year(date)) %>%
group_by(year, site, subplot, treatment) %>%
summarise(
melt_doy = if (any(depth == 0, na.rm = TRUE)) {
min(doy[depth == 0], na.rm = TRUE)
} else {
NA
},
.groups = "drop"
)
View(snowmelt)
justify = lm(melt_doy ~ treatment + slope + elevation + site, data = snowmelt)
snowmelt <- snowdepth %>%
mutate(year = year(date)) %>%
group_by(year, site, subplot, treatment) %>%
summarise(
melt_doy = if (any(depth == 0, na.rm = TRUE)) {
min(doy[depth == 0], na.rm = TRUE)
} else {
NA
},
.groups = "drop",
tpi11 = snowdepth$tpi11,
slope = snowdepth$slope,
elevation = snowdepth$elevation
)
snowmelt <- snowdepth %>%
mutate(year = year(date)) %>%
group_by(year, site, subplot, treatment) %>%
summarise(
melt_doy = if (any(depth == 0, na.rm = TRUE)) {
min(doy[depth == 0], na.rm = TRUE)
} else {
NA
},
.groups = "drop",
tpi11 = first(tpi11),
slope = firs(slope),
elevation = first(elevation)
)
snowdepth = snowdepth_raw %>%
setNames(c("site", "treatment", "subplot", "distance_from_top", "date", "depth", "comments")) %>%
filter(treatment != "", !is.na(treatment), depth != "NaN") %>%
mutate(
subplot = case_when(
subplot == "Top" ~ "A",
subplot == "Topmiddle" ~ "B",
subplot == "Middle" ~ "C",
subplot == "Bottommiddle" ~ "D",
subplot == "Bottom" ~ "E",
.default = NA
),
site = ifelse(site == "East_Knoll", "EastKnoll", site),
doy = yday(date),
treatment = factor(treatment),
depth = as.numeric(depth),
year = format(as.Date(date, format="%Y/%m/%d"),"%Y")
)
snowdepth = snowdepth %>%
left_join(topography, by = c("site", "subplot", "treatment")) %>%
filter(site != "Soddie")
snowmelt <- snowdepth %>%
mutate(year = year(date)) %>%
group_by(year, site, subplot, treatment) %>%
summarise(
melt_doy = if (any(depth == 0, na.rm = TRUE)) {
min(doy[depth == 0], na.rm = TRUE)
} else {
NA
},
.groups = "drop",
tpi11 = first(tpi11),
slope = firs(slope),
elevation = first(elevation)
)
snowmelt <- snowdepth %>%
mutate(year = year(date)) %>%
group_by(year, site, subplot, treatment) %>%
summarise(
melt_doy = if (any(depth == 0, na.rm = TRUE)) {
min(doy[depth == 0], na.rm = TRUE)
} else {
NA
},
.groups = "drop",
tpi11 = first(tpi11),
slope = first(slope),
elevation = first(elevation)
)
snowmelt <- snowdepth %>%
mutate(year = year(date)) %>%
group_by(year, site, subplot, treatment) %>%
summarise(
melt_doy = if (any(depth == 0, na.rm = TRUE)) {
min(doy[depth == 0], na.rm = TRUE)
} else {
NA
},
.groups = "drop",
tpi11 = first(tpi11),
slope = first(slope),
elevation = first(elevation)
) %>%
filter(!is.na(melt_doy))
justify = lm(melt_doy ~ treatment + slope + elevation + site, data = snowmelt)
# F test to see if the instrument explains enough of the explanatory variable
fitstat(justify, "ivf")
justify = lm(melt_doy ~ treatment + slope + elevation + tpi11 + site, data = snowmelt)
# F test to see if the instrument explains enough of the explanatory variable
summary(justify)
justify = lm(melt_doy ~ treatment + subplot + site, data = snowmelt)
# F test to see if the instrument explains enough of the explanatory variable
summary(justify)
justify = lm(melt_doy ~ treatment + subplot + site, data = snowmelt)
# F test to see if the instrument explains enough of the explanatory variable
summary(justify)
snowmelt <- snowdepth %>%
mutate(
year = year(date),
plot = join(site, subplot)
) %>%
group_by(year, plot, treatment) %>%
summarise(
melt_doy = if (any(depth == 0, na.rm = TRUE)) {
min(doy[depth == 0], na.rm = TRUE)
} else {
NA
},
.groups = "drop",
tpi11 = first(tpi11),
slope = first(slope),
elevation = first(elevation)
) %>%
filter(!is.na(melt_doy))
snowmelt <- snowdepth %>%
mutate(
year = year(date),
plot = paste(site, subplot)
) %>%
group_by(year, plot, treatment) %>%
summarise(
melt_doy = if (any(depth == 0, na.rm = TRUE)) {
min(doy[depth == 0], na.rm = TRUE)
} else {
NA
},
.groups = "drop",
tpi11 = first(tpi11),
slope = first(slope),
elevation = first(elevation)
) %>%
filter(!is.na(melt_doy))
# Default lm regressing treatment variable on IV and other relevant factors.
justify = lmer(melt_doy ~ treatment + (1 | subplot), data = snowmelt)
justify = lm(melt_doy ~ treatment + plot + year, data = snowmelt)
# F test to see if the instrument explains enough of the explanatory variable
summary(justify)
snowmelt_site = snowdepth %>%
mutate(
year = year(date)
) %>%
group_by(year, plot, treatment) %>%
summarise(
melt_doy = if (any(depth == 0, na.rm = TRUE)) {
min(doy[depth == 0], na.rm = TRUE)
} else {
NA
},
.groups = "drop",
tpi11 = first(tpi11),
slope = first(slope),
elevation = first(elevation)
) %>%
filter(!is.na(melt_doy))
snowmelt_site = snowdepth %>%
mutate(
year = year(date)
) %>%
group_by(year, subplot, site, treatment) %>%
summarise(
melt_doy = if (any(depth == 0, na.rm = TRUE)) {
min(doy[depth == 0], na.rm = TRUE)
} else {
NA
},
.groups = "drop",
tpi11 = first(tpi11),
slope = first(slope),
elevation = first(elevation)
) %>%
filter(!is.na(melt_doy))
snowmelt_effect = ggplot(snowmelt_site, aes(x = treatment, y = melt_doy, fill = treatment)) +
geom_boxplot() +
labs(title = "Snowmelt Day Comparison Between Control and Treatment",
x = "Treatment",
y = "Snowmelt Day of Year") +
scale_fill_manual(values = c("Control" = "cyan", "Early" = "gray")) +  # Optional: choose your colors
theme_minimal() +
facet_wrap(~ site) # Create a separate subplot for each site
snowmelt_effect
snowdepth_soddie = snowdepth_raw %>%
setNames(c("site", "treatment", "subplot", "distance_from_top", "date", "depth", "comments")) %>%
filter(treatment != "", !is.na(treatment), depth != "NaN") %>%
mutate(
# rename subplot levels
subplot = case_when(
subplot == "Top" ~ "A",
subplot == "Topmiddle" ~ "B",
subplot == "Middle" ~ "C",
subplot == "Bottommiddle" ~ "D",
subplot == "Bottom" ~ "E",
.default = NA
),
# rename East Knoll
site = ifelse(site == "East_Knoll", "EastKnoll", site),
# get day-of-year for each date
doy = yday(date),
treatment = factor(treatment),
depth = as.numeric(depth),
# extract year from date
year = format(as.Date(date, format="%Y/%m/%d"),"%Y")
) %>%
# bind snowdepth data with topography data
left_join(topography, by = c("site", "subplot", "treatment"))
snowdepth = filter(snowdepth_soddie, site != "Soddie")
snowmelt_plot = snowdepth_soddie %>%
mutate(
year = year(date),
plot = paste(site, subplot)
) %>%
group_by(year, plot, treatment) %>%
summarise(
melt_doy = if (any(depth == 0, na.rm = TRUE)) {
min(doy[depth == 0], na.rm = TRUE)
} else {
NA
},
.groups = "drop",
tpi11 = first(tpi11),
slope = first(slope),
elevation = first(elevation)
) %>%
filter(!is.na(melt_doy))
snowmelt_site = snowdepth_soddie %>%
mutate(
year = year(date)
) %>%
group_by(year, subplot, site, treatment) %>%
summarise(
melt_doy = if (any(depth == 0, na.rm = TRUE)) {
min(doy[depth == 0], na.rm = TRUE)
} else {
NA
},
.groups = "drop",
tpi11 = first(tpi11),
slope = first(slope),
elevation = first(elevation)
) %>%
filter(!is.na(melt_doy))
justify = lm(melt_doy ~ treatment + plot + year, data = snowmelt_plot)
# F test to see if the instrument explains enough of the explanatory variable
summary(justify)
snowmelt_effect = ggplot(snowmelt_site, aes(x = treatment, y = melt_doy, fill = treatment)) +
geom_boxplot() +
labs(title = "Snowmelt Day Comparison Between Control and Treatment",
x = "Treatment",
y = "Snowmelt Day of Year") +
scale_fill_manual(values = c("Control" = "cyan", "Early" = "gray")) +  # Optional: choose your colors
theme_minimal() +
facet_wrap(~ site) # Create a separate subplot for each site
snowmelt_effect
justify = lm(melt_doy ~ treatment + site + subplot + year, data = snowmelt_plot)
# F test to see if the instrument explains enough of the explanatory variable
summary(justify)
justify = lm(melt_doy ~ treatment + site + subplot + year, data = snowmelt_plot)
justify = lm(melt_doy ~ treatment + site + subplot + year, data = snowmelt_site)
# F test to see if the instrument explains enough of the explanatory variable
summary(justify)
# anova demonstrates that the model where treatment is allowed to affect depth ~ doy spline is better than null model
anova(gam_model, gam_null, test = "Chisq")
# anova demonstrates that the model where treatment is allowed to affect depth ~ doy spline is better than null model
anova(gam_pollinator, gam_pollinator_null, test = "Chisq")
gam_pollinator <- gam(
# treatment is included as an "additive factor" to account for varried intercepts (overall deeper snow in treatment v control)
simpson ~ s(doy, by = treatment) + site + treatment + doy,
data = pollinators,
method = "REML"
)
pollinators <- visitors %>%
group_by(date, site, subplot, treatment, visitor_nomenclature) %>%
summarise(visit_count = sum(visitornumber), .groups = "drop") %>%
pivot_wider(names_from = visitor_nomenclature, values_from = visit_count, values_fill = 0) %>%
mutate(
richness = replace_na(specnumber(across(where(is.numeric), .names = "richness")), 0),
simpson = replace_na(diversity(across(where(is.numeric)), index = "simpson"), 0 ),
doy = yday(date),
treatment = factor(treatment)
)
gam_pollinator <- gam(
# treatment is included as an "additive factor" to account for varried intercepts (overall deeper snow in treatment v control)
simpson ~ s(doy, by = treatment) + site + treatment + doy,
data = pollinators,
method = "REML"
)
summary(gam_pollinator)
# non linear gam model to assess the relationship between doy and depth under "null" conditions (treatment not included in model)
gam_pollinator_null <- gam(
simpson ~ s(doy) + site + treatment + doy,
data = pollinators,
method = "REML"
)
summary(gam_pollinator_null)
# anova demonstrates that the model where treatment is allowed to affect depth ~ doy spline is better than null model
anova(gam_pollinator, gam_pollinator_null, test = "Chisq")
flowercounts = read_csv("../Scratch/blacksand_flowercounts_2020.ar.data.csv")
View(flowercounts)
