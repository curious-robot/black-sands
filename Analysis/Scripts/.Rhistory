geom_line() +    scale_color_manual(values=c('#999999','#E69F00')) +
ggtitle("Variation in log(live biomass) after removing plot fixed effects") +
theme_bw() +
ylim(c(-5,7)) + labs(y = "log(Live biomass)") +  labs(x = "Year") +
theme(axis.title.y= element_text(size=14)) + theme(axis.title.x= element_text(size=14)) +
theme(axis.text.y = element_text(size = 14))
PlotFE_1 <- comb %>%
filter(site_code=="cdcr.us") %>%
feols(log(live_mass) ~ log(rich) | newplotid + year, ., cluster = "newplotid")
PlotFE_2 <- comb %>%
filter(site_code=="cdpt.us") %>%
feols(log(live_mass) ~ log(rich) | newplotid + year, ., cluster = "newplotid")
PlotFE_3 <- comb %>%
filter(site_code=="koffler.ca") %>%
feols(log(live_mass) ~ log(rich) | newplotid + year, ., cluster = "newplotid")
PlotFE_4 <- comb %>%
filter(site_code=="sedg.us") %>%
feols(log(live_mass) ~ log(rich) | newplotid + year, ., cluster = "newplotid")
PlotFE_5 <- comb %>%
filter(site_code=="sier.us") %>%
feols(log(live_mass) ~ log(rich) | newplotid + year, ., cluster = "newplotid")
etable(SimpleCorrAll, PlotFE_1, PlotFE_2, PlotFE_3, PlotFE_4, PlotFE_5,
cluster = "newplotid",
drop = "!rich",
subtitles = c("Data All Years","US - CDCR", "US - CDPT", "CA - Koffler", "US - SEDG", "US - SIER" ))
comb[,doubledm.log.live_mass:=singledm.log.live_mass-mean(singledm.log.live_mass, na.rm=T), by=.(site, year)]
sitebyyear = ggplot(comb[site=="sedg.us" & plot %in% c("1","17") | (site=="sevi.us" & plot %in% c("8","12")),],
aes(x=year, y=doubledm.log.live_mass, group=plot, linetype=plot, color = site)) +
geom_line() +   scale_color_manual(values=c('#999999','#E69F00')) +
ggtitle("Variation in log(live biomass) after removing plot fixed and site by year effects") +
theme_bw() +
ylim(c(-5,7))
sitebyyear +
labs(y = "log(Live biomass)") +  labs(x = "Year") +
theme(axis.title.y= element_text(size=14)) + theme(axis.title.x= element_text(size=14)) +
theme(axis.text.y = element_text(size = 14))
library(tidyverse)
library(vegan)
library(ggpubr)
library(broom)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
flowercounts = read_csv("../Scratch/blacksand_flowercounts_2020.ar.data.csv")
geumexclusions = read_csv("../Scratch/blacksand_geumexclusions_2020.ar.data.csv")
geumindividualvisits = read_csv("../Scratch/blacksand_geumindividualvisits_2020.ar.data.csv")
topography = read_csv("../Scratch/blacksand_topography_2020.ar.data.csv")
visitors = read_csv("../Scratch/blacksand_visitors_2020.ar.data.csv")
head(dataframe)
View(visitors)
View(visitors)
pollinator_data_summary <- visitors %>%
group_by(date, site, subplot, treatment, visitor_nomenclature) %>%
summarise(visit_count = sum(visitornumber)) %>%
spread(key = visitor_nomenclature, value = visit_count, fill = 0)
View(pollinator_data_summary)
pollinator_data_summary$richness <- specnumber(pollinator_data_summary[,-c(1:4)])  # Excluding date, site, and subplot columns
pollinator_data_summary$simpson_diversity <- diversity(pollinator_data_summary[,-c(1:4)], index = "simpson")
?cbind
snowmelt = read_csv("../Scratch/snowmelt.csv")
View(snowmelt)
names(snowmelt) = c("LTER", "site", "year", "treatment", "block", "melt_doy")
levels(pollinator_data_summary)
levels(pollinator_data_summary$site)
snowmelt$site = recode(snowmelt$site, East_Knoll = "EastKnoll")
snowmelt$site = recode(snowmelt$block, C = "E")
snowmelt$site = recode(snowmelt$block, B = "C")
snowmelt = read_csv("../Scratch/snowmelt.csv")
# Clean snowmelt data to match pollinator data
names(snowmelt) = c("LTER", "site", "year", "treatment", "block", "melt_doy")
snowmelt$site = recode(snowmelt$site, East_Knoll = "EastKnoll")
snowmelt$site = recode(snowmelt$block, C = "E")
snowmelt$site = recode(snowmelt$block, B = "C")
snowmelt = read_csv("../Scratch/snowmelt.csv")
# Clean snowmelt data to match pollinator data
names(snowmelt) = c("LTER", "site", "year", "treatment", "block", "melt_doy")
snowmelt$site = recode(snowmelt$site, East_Knoll = "EastKnoll")
snowmelt$block = recode(snowmelt$block, C = "E")
snowmelt$block = recode(snowmelt$block, B = "C")
head(snowmelt)
simulated_snowmelt <- snowmelt %>%
# Group by site, year, and treatment for averaging
group_by(site, year, treatment) %>%
# Create rows for blocks B and D
summarise(
melt_doy_B = mean(melt_doy[block %in% c("A", "C")], na.rm = TRUE),
melt_doy_D = mean(melt_doy[block %in% c("C", "E")], na.rm = TRUE)
) %>%
# Reshape the data into the right format (replicate site, year, and treatment for B and D)
pivot_longer(cols = starts_with("melt_doy"), names_to = "block", values_to = "melt_doy") %>%
mutate(block = case_when(
block == "melt_doy_B" ~ "B",
block == "melt_doy_D" ~ "D",
TRUE ~ block
))
# Combine with the original data
final_data <- bind_rows(snowmelt, simulated_snowmelt)
View(snowmelt)
snowmelt = read_csv("../Scratch/snowmelt.csv")
# Clean snowmelt data to match pollinator data
names(snowmelt) = c("LTER", "site", "year", "treatment", "block", "melt_doy")
snowmelt$site = recode(snowmelt$site, East_Knoll = "EastKnoll")
snowmelt$block = recode(snowmelt$block, C = "E")
snowmelt$block = recode(snowmelt$block, B = "C")
snowmelt = read_csv("../Scratch/snowmelt.csv")
# Clean snowmelt data to match pollinator data
names(snowmelt) = c("LTER", "site", "year", "treatment", "block", "melt_doy")
snowmelt$site = recode(snowmelt$site, East_Knoll = "EastKnoll")
snowmelt$block = recode(snowmelt$block, C = "E")
snowmelt$block = recode(snowmelt$block, B = "C")
simulated_snowmelt <- snowmelt %>%
# Group by site, year, and treatment for averaging
group_by(site, year, treatment,block) %>%
# Create rows for blocks B and D
summarise(
melt_doy_B = mean(melt_doy[block %in% c("A", "C")], na.rm = TRUE),
melt_doy_D = mean(melt_doy[block %in% c("C", "E")], na.rm = TRUE)
) %>%
# Reshape the data into the right format (replicate site, year, and treatment for B and D)
pivot_longer(cols = starts_with("melt_doy"), names_to = "block", values_to = "melt_doy") %>%
mutate(block = case_when(
block == "melt_doy_B" ~ "B",
block == "melt_doy_D" ~ "D",
TRUE ~ block
))
simulated_snowmelt <- snowmelt %>%
# Group by site, year, and treatment for averaging
group_by(site, year, treatment) %>%
# Create rows for blocks B and D
summarise(
melt_doy_B = mean(melt_doy[block %in% c("A", "C")], na.rm = TRUE),
melt_doy_D = mean(melt_doy[block %in% c("C", "E")], na.rm = TRUE)
) %>%
# Reshape the data into the right format (replicate site, year, and treatment for B and D)
pivot_longer(cols = starts_with("melt_doy"), names_to = "block", values_to = "melt_doy") %>%
mutate(block = case_when(
block == "melt_doy_B" ~ "B",
block == "melt_doy_D" ~ "D",
TRUE ~ block
))
# Combine with the original data
final_data <- bind_rows(snowmelt, simulated_snowmelt)
View(simulated_snowmelt)
# Combine with the original data
snowmelt <- bind_rows(snowmelt, simulated_snowmelt)
View(snowmelt)
View(pollinator_data_summary)
snowmelt = read_csv("../Scratch/snowmelt.csv")
# Clean snowmelt data to match pollinator data
names(snowmelt) = c("LTER", "site", "year", "treatment", "subplot", "melt_doy")
snowmelt$site = recode(snowmelt$site, East_Knoll = "EastKnoll")
snowmelt$block = recode(snowmelt$subplot, C = "E")
snowmelt$block = recode(snowmelt$subplot, B = "C")
# ILLEGAL simulation of snowmelt day for the missing B and D subplots that were present
# in Rose-Person's data but missing from the ITEX snowmelt data. Need to find a better
# and responsible way to account for this.
simulated_snowmelt <- snowmelt %>%
# Group by site, year, and treatment for averaging
group_by(site, year, treatment) %>%
# Create rows for blocks B and D
summarise(
melt_doy_B = mean(melt_doy[subplot %in% c("A", "C")], na.rm = TRUE),
melt_doy_D = mean(melt_doy[subplot %in% c("C", "E")], na.rm = TRUE)
) %>%
# Reshape the data into the right format (replicate site, year, and treatment for B and D)
pivot_longer(cols = starts_with("melt_doy"), names_to = "subplot", values_to = "melt_doy") %>%
mutate(subplot = case_when(
block == "melt_doy_B" ~ "B",
block == "melt_doy_D" ~ "D",
TRUE ~ subplot
))
simulated_snowmelt <- snowmelt %>%
# Group by site, year, and treatment for averaging
group_by(site, year, treatment) %>%
# Create rows for blocks B and D
summarise(
melt_doy_B = mean(melt_doy[subplot %in% c("A", "C")], na.rm = TRUE),
melt_doy_D = mean(melt_doy[subplot %in% c("C", "E")], na.rm = TRUE)
) %>%
# Reshape the data into the right format (replicate site, year, and treatment for B and D)
pivot_longer(cols = starts_with("melt_doy"), names_to = "subplot", values_to = "melt_doy") %>%
mutate(subplot = case_when(
subplot == "melt_doy_B" ~ "B",
subplot == "melt_doy_D" ~ "D",
TRUE ~ subplot
))
# Combine with the original data
snowmelt <- bind_rows(snowmelt, simulated_snowmelt)
# Bind snowmelt and pollinator data
combined = left_join(pollinator_data_summary, snowmelt, by = "subplot")
View(combined)
# Bind snowmelt and pollinator data
combined = merge(pollinator_data_summary, snowmelt, by = "subplot", all = TRUE)
View(combined)
# Add year variable for pollinator data
pollinator_data_summary$year = format(as.Date(pollinator_data_summary$date, format="%Y-%m-%d"),"%Y")
# Bind snowmelt and pollinator data
combined = merge(pollinator_data_summary, snowmelt, by = c("date", "subplot", "site", "treatment"), all = TRUE)
# Bind snowmelt and pollinator data
combined = merge(pollinator_data_summary, snowmelt, by = c("year", "subplot", "site", "treatment"), all = TRUE)
View(combined)
# Bind snowmelt and pollinator data
combined = merge(pollinator_data_summary, snowmelt, by = c("year", "subplot", "site", "treatment"), all.y = TRUE)
View(combined)
combined = select(site, year, date, treatment, subplot, richness, simpson_diversity, melt_doy)
combined = select(combined, site, year, date, treatment, subplot, richness, simpson_diversity, melt_doy)
View(combined)
combined = select(combined, site, year, date, treatment, subplot, richness, simpson_diversity, melt_doy, everything())
combined = select(combined, site, year, date, treatment, subplot, richness, simpson_diversity, melt_doy, everything())
combined = merge(pollinator_data_summary, snowmelt, by = c("year", "subplot", "site", "treatment"), all.y = TRUE)
combined = select(combined, site, year, date, treatment, subplot, richness, simpson_diversity, melt_doy, everything())
combined = merge(pollinator_data_summary, snowmelt, by = c("year", "subplot", "site", "treatment"), all.y = TRUE)
combined = select(combined, lter, year, date, site, subplot, treatment, richness, simpson_diversity, melt_doy, everything())
combined = merge(pollinator_data_summary, snowmelt, by = c("year", "subplot", "site", "treatment"), all.y = TRUE)
combined = select(combined, LTER, year, date, site, subplot, treatment, richness, simpson_diversity, melt_doy, everything())
snowmelt_lm <- snowmelt_raw %>%
group_by(subplot) %>%
lm(snowmelt_doy ~ treatment + subplot + year + site, data = .)
snowmelt_lm <- snowmelt %>%
group_by(subplot) %>%
lm(snowmelt_doy ~ treatment + subplot + year + site, data = .)
snowmelt_lm <- snowmelt %>%
group_by(subplot) %>%
lm(melt_doy ~ treatment + subplot + year + site, data = .)
head(tidy(snowmelt_lm))
print(snowmelt_lm)
ggplot(snowmelt, aes(x = year, y = diff, color = local_site)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "Change in Snowmelt Difference by Year and Site",
x = "Year",
y = "Difference in Snowmelt Day",
color = "Site") +
theme_minimal()
snowmelt_lm <- snowmelt %>%
pivot_wider(names_from = treatment, values_from = melt_doy) %>%
mutate(diff = Control - Early) %>%
select(site, year, diff, subplot)
snowmelt_lm <- snowmelt_lm %>%
group_by(subplot) %>%
lm(melt_doy ~ treatment + subplot + year + site, data = .)
snowmelt_lm <- snowmelt %>%
pivot_wider(names_from = treatment, values_from = melt_doy) %>%
mutate(diff = Control - Early) %>%
select(site, year, diff, subplot)
snowmelt_lm <- snowmelt_lm %>%
group_by(subplot) %>%
lm(melt_doy ~ treatment + subplot + year + site, data = .)
snowmelt_lm <- snowmelt %>%
group_by(subplot) %>%
lm(melt_doy ~ treatment + subplot + year + site, data = .)
head(tidy(snowmelt_lm))
print(snowmelt_lm)
ggplot(snowmelt, aes(x = year, y = diff, color = local_site)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "Change in Snowmelt Difference by Year and Site",
x = "Year",
y = "Difference in Snowmelt Day",
color = "Site") +
theme_minimal()
ggplot(snowmelt, aes(x = year, y = diff, color = site)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "Change in Snowmelt Difference by Year and Site",
x = "Year",
y = "Difference in Snowmelt Day",
color = "Site") +
theme_minimal()
snowmelt_graph <- snowmelt %>%
pivot_wider(names_from = treatment, values_from = melt_doy) %>%
mutate(diff = Control - Early) %>%
select(site, year, diff, subplot, diff)
snowmelt_lm <- snowmelt %>%
group_by(subplot) %>%
lm(melt_doy ~ treatment + subplot + year + site, data = .)
head(tidy(snowmelt_lm))
print(snowmelt_lm)
ggplot(snowmelt_graph, aes(x = year, y = diff, color = site)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "Change in Snowmelt Difference by Year and Site",
x = "Year",
y = "Difference in Snowmelt Day",
color = "Site") +
theme_minimal()
ggplot(snowmelt_graph, aes(x = year, y = diff, color = site)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "Change in Snowmelt Difference by Year and Site",
x = "Year",
y = "Difference in Snowmelt Day",
color = "Site") +
theme_minimal()
snowmelt_lm <- snowmelt %>%
group_by(subplot) %>%
lm(melt_doy ~ treatment + subplot + year + site, data = .)
snowmelt_lm <- snowmelt %>%
group_by(subplot) %>%
lm(melt_doy ~ treatment + subplot + year + site, data = .)
snowmelt_lm
snowmelt_lm <- snowmelt %>%
group_by(subplot) %>%
lm(melt_doy ~ treatment + year + site, data = .)
snowmelt_lm
levels(as.levels(snowmelt$site))
levels(as.factor(snowmelt$site))
knitr::opts_chunk$set(echo = TRUE)
### Install package if you need to
install.packages("AER",
repos = "http://cran.us.r-project.org")
### Load required libraries
library(AER)
library(tidyverse)
### Write function to simulate a dataset
simulate_data <- function(){
## Create data variables within data.frame
## Make a column for observation ID
df <- data.frame(id = seq(1, 1000),
## Columns for covariates
slope = runif(1000, min = 50, max = 100),
elevation = runif(1000, min = 150, max = 185),
dist_cities = runif(1000, min = 0, max = 250),
## Unobserved variable
local_inst = rnorm(1000, mean = 49, sd = 17),
## A column for the error term
error = rnorm(1000, mean = 0, sd = 5),
### The instrumental variable
dist_tributary = rnorm(1000, mean = 400, sd = 140))
### Add columns for treatment (level of forest protection) and response (monthly household consumption)
df <- df %>%
### Add column for the treatment variable, related to the IV
mutate(forest_protect = 0.2*dist_tributary + 0.4*local_inst +
rnorm(100, 0, 1)) %>%
### Add column for the outcome variable
mutate(consumpt = 5*forest_protect +
0.07*slope + 0.05*elevation + 2*dist_cities +
10*local_inst + error)
return(df)
}
### Write a function to generate data and analyze using OLS
ols_fun = function(){
## Simulate the dataset
data <- simulate_data()
## Run OLS
ols <- lm(consumpt ~ forest_protect + slope + elevation +
dist_cities, data = data)
## Extract model coefficients and standard error
protect_coeff <- coef(summary(ols))["forest_protect", "Estimate"]
protect_se <- coef(summary(ols))["forest_protect", "Std. Error"]
list <- list(protect_coeff, protect_se)
}
### Apply the function on 1000 replicates
ols_sim <- replicate(100, ols_fun())
### Extract the model estimates
ols_protect_est <- unlist(ols_sim[1, ])
### Print mean, standard deviation, minimum, and maximum values for coefficient estimates
c(mean(ols_protect_est), sd(ols_protect_est),
min(ols_protect_est), max(ols_protect_est))
### Extract the standard deviations
ols_protect_sd <- unlist(ols_sim[2, ])
### Print mean, standard deviation, minimum, and maximum
### standard deviation of coefficient estimates
c(mean(ols_protect_sd), sd(ols_protect_sd),
min(ols_protect_sd), max(ols_protect_sd))
### Write a function to generate data and analyze using IV
iv_tsls_fun = function(){
## Simulate the dataset
data <- simulate_data()
## Step 1
## Regress the percent of protected forest on the other explanatory variables
## and our instrumental variable
tsls_step1 <- lm(forest_protect ~ slope + elevation +
dist_cities + dist_tributary, data = data)
## Extract fitted values of the percent of protected forest
pred_value <- fitted.values(tsls_step1)
## Step 2
## Regress our outcome of interest on the predicted value of the treatment +
## the other explanatory variables
tsls_step2 <- lm(consumpt ~ pred_value + slope + elevation + dist_cities,
data = data)
## Extract model coefficients and standard error
iv_coeff <- coef(summary(tsls_step2))["pred_value", "Estimate"]
iv_se <- coef(summary(tsls_step2))["pred_value", "Std. Error"]
list <- list(iv_coeff, iv_se)
}
### Apply the function on 100 replicates
iv_tsls_sim <- replicate(100, iv_tsls_fun())
### Extract the model estimates
iv_tsls_est <- unlist(iv_tsls_sim[1, ])
### Print mean, standard deviation, minimum, and maximum values for coefficient estimates
c(mean(iv_tsls_est), sd(iv_tsls_est),
min(iv_tsls_est), max(iv_tsls_est))
### Extract the standard deviations
iv_tsls_est_sd <- unlist(iv_tsls_sim[2, ])
### Print mean, standard deviation, minimum, and maximum standard deviation
### of coefficient estimates
c(mean(iv_tsls_est_sd), sd(iv_tsls_est_sd),
min(iv_tsls_est_sd), max(iv_tsls_est_sd))
### Make single df of model estimates
both_methods <- cbind.data.frame(ols_protect_est,
iv_tsls_est)
### Reshape the data
both_methods <- both_methods %>%
gather(method, estimate, ols_protect_est:iv_tsls_est) %>%
mutate(method_clean = ifelse(method == "ols_protect_est", "OLS", "IV"))
### Visualize distribution of estimates
ggplot(both_methods, aes(x = method_clean, y = estimate)) +
geom_boxplot() +
theme_classic() +
labs(y = "Estimated effect of forest protection",
x = "Estimation method") +
## Add a horizontal line indicating the actual value of the effect
geom_hline(yintercept = 5,
linetype = "dashed",
color = "red")
# ggsave("method_comparison.png")
snowmelt_lm = snowmelt %>%
group_by(site) %>%
lm(melt_doy ~ treatment + year + subplot, data = .)
snowmelt_lm
levels(as.factor(snowmelt$subplot))
View(snowmelt)
snowmelt = read_csv("../Scratch/snowmelt.csv")
# Clean snowmelt data to match pollinator data
names(snowmelt) = c("LTER", "site", "year", "treatment", "subplot", "melt_doy")
snowmelt$site = recode(snowmelt$site, East_Knoll = "EastKnoll")
snowmelt$site = recode(snowmelt$site, East_Knoll = "EastKnoll")
snowmelt$block = recode(snowmelt$subplot, C = "E")
snowmelt = read_csv("../Scratch/snowmelt.csv")
names(snowmelt) = c("LTER", "site", "year", "treatment", "subplot", "melt_doy")
library(tidyverse)
library(vegan)
library(ggpubr)
library(broom)
snowmelt$site = recode(snowmelt$site, East_Knoll = "EastKnoll")
snowmelt$site = recode(snowmelt$site, "East_Knoll" = "EastKnoll")
snowmelt$site = recode(snowmelt$site, "East_Knoll" = "EastKnoll")
snowmelt$site = recode(as.factor(snowmelt$site), East_Knoll = "EastKnoll")
snowmelt$site = recode(snowmelt$site, East_Knoll = "EastKnoll")
?recode
snowmelt$site = case_match(snowmelt$site, "East_Knoll" ~ "EastKnoll")
snowmelt = read_csv("../Scratch/snowmelt.csv")
# Clean snowmelt data to match pollinator data
names(snowmelt) = c("LTER", "site", "year", "treatment", "subplot", "melt_doy")
snowmelt$site = case_match(snowmelt$site, "East_Knoll" ~ "EastKnoll")
snowmelt$subplot = case_match(snowmelt$subplot, "C"~"E", "B"~"C")
snowmelt = read_csv("../Scratch/snowmelt.csv")
# Clean snowmelt data to match pollinator data
names(snowmelt) = c("LTER", "site", "year", "treatment", "subplot", "melt_doy")
snowmelt$site = case_match(snowmelt$site, "East_Knoll" ~ "EastKnoll", .default = snowmelt$site)
snowmelt$subplot = case_match(snowmelt$subplot, "C"~"E", "B"~"C", .default = snowmelt$subplot)
simulated_snowmelt <- snowmelt %>%
# Group by site, year, and treatment for averaging
group_by(site, year, treatment) %>%
# Create rows for blocks B and D
summarise(
melt_doy_B = mean(melt_doy[subplot %in% c("A", "C")], na.rm = TRUE),
melt_doy_D = mean(melt_doy[subplot %in% c("C", "E")], na.rm = TRUE)
) %>%
# Reshape the data into the right format (replicate site, year, and treatment for B and D)
pivot_longer(cols = starts_with("melt_doy"), names_to = "subplot", values_to = "melt_doy") %>%
mutate(subplot = case_when(
subplot == "melt_doy_B" ~ "B",
subplot == "melt_doy_D" ~ "D",
TRUE ~ subplot
))
# Combine with the original data
snowmelt <- bind_rows(snowmelt, simulated_snowmelt)
# Collapse species observations into counts at each subplot grouped by date, site, treatment.
pollinator_data_summary <- visitors %>%
group_by(date, site, subplot, treatment, visitor_nomenclature) %>%
summarise(visit_count = sum(visitornumber)) %>%
spread(key = visitor_nomenclature, value = visit_count, fill = 0)
head(pollinator_data_summary)
# Calculate alpha diversity
pollinator_data_summary$richness <- specnumber(pollinator_data_summary[,-c(1:4)])  # Excluding date, site, and subplot columns
# Calculate Simpson diversity
pollinator_data_summary$simpson_diversity <- diversity(pollinator_data_summary[,-c(1:4)], index = "simpson")
# Add year variable for pollinator data
pollinator_data_summary$year = format(as.Date(pollinator_data_summary$date, format="%Y-%m-%d"),"%Y")
# Bind snowmelt and pollinator data
combined = merge(pollinator_data_summary, snowmelt, by = c("year", "subplot", "site", "treatment"), all.y = TRUE)
combined = select(combined, LTER, year, date, site, subplot, treatment, richness, simpson_diversity, melt_doy, everything())
snowmelt_lm = snowmelt %>%
group_by(site) %>%
lm(melt_doy ~ treatment + year + subplot, data = .)
snowmelt_lm
snowmelt_iv = snowmelt %>%
ivreg(simpson_diversity ~ melt_doy + subplot + site | treatment +
subplot + site, data = .)
diversity_iv = combined %>%
ivreg(simpson_diversity ~ melt_doy + subplot + site | treatment +
subplot + site, data = .)
diversity_iv
### Simulate a dataset
data_for_iv <- simulate_data()
### Write the first stage of two stage procedure
first_stage <- lm(forest_protect ~ slope + elevation +
dist_cities + dist_tributary,
data = data_for_iv)
### F test to see if the instrument explains enough of the explanatory variable
instr_ftest <- waldtest(first_stage, .~.-dist_tributary)
print(instr_ftest)
### visualize
data_for_iv %>%
ggplot(aes(x = local_inst, y = consumpt)) + geom_point()
### F test to see if the instrument explains enough of the explanatory variable
justify_ftest <- waldtest(justify, .~.-treatment)
### Write the first stage of two stage procedure
justify = lm(melt_doy ~ treatment + site + subplot, data = snowmelt)
### F test to see if the instrument explains enough of the explanatory variable
justify_ftest <- waldtest(justify, .~.-treatment)
print(justify_ftest)
