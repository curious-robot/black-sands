mutate(
treatment_pair = ifelse(treatment == "Early", "Control", "Early"),
melt_doy_other = melt_doy
) %>%
select(site, subplot, year, treatment_pair, melt_doy_other)
pollinators_total <- pollinators_total %>%
left_join(
pollinators_pairs,
by = c("site", "subplot", "year", "treatment" = "treatment_pair")
) %>%
mutate(
complier = case_when(
treatment == "Control" & melt_doy > melt_doy_other ~ TRUE,
treatment == "Early" & melt_doy < melt_doy_other ~ TRUE,
TRUE ~ FALSE
)
) %>%
distinct(site, subplot, year, treatment, .keep_all = TRUE)
twfe_lsdv_late = lm(richness ~ treatment + factor(site) + factor(subplot), data = filter(pollinators_total, complier == F))
summary(twfe_lsdv_late)
nrow(filter(pollinators_total, complier == F))
nrow(filter(pollinators_total, complier == T))
?filter
twfe_lsdv_late = lm(richness ~ treatment + factor(site) + factor(subplot), data = filter(pollinators_total, complier == T))
summary(twfe_lsdv_late)
ks.test(tpi11 ~ treatment, data = filter(snowmelt, year == "2020"))
ks.test(tpi11 ~ treatment +subplot, data = filter(snowmelt, year == "2020"))
balance_test = snowmelt %>%
filter(year == 2020) %>%
group_by(subplot) %>%
summarise(
p_wilcox_tpi11 = wilcox.test(tpi11 ~ treatment)$p.value,
p_wilcox_slope = wilcox.test(slope ~ treatment)$p.value,
p_wilcox_elev  = wilcox.test(elevation ~ treatment)$p.value,
.groups = "drop"
)
View(balance_test)
balance_test = snowmelt %>%
filter(year == 2020) %>%
group_by(site, subplot) %>%
summarise(
p_wilcox_tpi11 = wilcox.test(tpi11 ~ treatment)$p.value,
p_wilcox_slope = wilcox.test(slope ~ treatment)$p.value,
p_wilcox_elev  = wilcox.test(elevation ~ treatment)$p.value,
.groups = "drop"
)
twfe_lsdv_late = lm(simpson ~ treatment + factor(site) + factor(subplot), data = filter(pollinators_total, complier == T))
summary(twfe_lsdv_late)
twfe_lsdv_late = lm(richness.yule.test() ~ treatment + factor(site) + factor(subplot), data = filter(pollinators_total, complier == T))
twfe_lsdv_late = lm(richness ~ treatment + factor(site) + factor(subplot), data = filter(pollinators_total, complier == T))
summary(twfe_lsdv_late)
lm(simpson ~ melt_doy + slope + elevation + tpi11, data = pollinators)
diversity_ols = lm(simpson ~ melt_doy + slope + elevation + tpi11, data = pollinators)
summary(diversity_ols)
diversity_ols = lm(simpson ~ melt_doy + slope + elevation + tpi11, data = pollinators_total)
View(pollinators_total)
View(pollinators)
View(pollinators_total)
pollinators_total = pollinators %>%
group_by(year, site, subplot, treatment) %>%
summarise(
total = sum(across(all_of(visitor_sum)), na.rm = TRUE),
max_simpson = obs_doy[which.max(simpson)],
max_richness = obs_doy[which.max(richness)],
melt_doy = first(melt_doy),
melt_doy = first(melt_doy),
elevation = first(elevation),
tpi11 = first(tpi11),
slope = first(slope),
.groups = "drop"
) %>%
mutate(
richness = replace_na(specnumber(across(where(is.numeric))), 0),
simpson = replace_na(diversity(across(where(is.numeric)), index = "simpson"), 0)
)
pollinators = visitors %>%
group_by(date, site, subplot, treatment, visitor_nomenclature) %>%
summarise(visit_count = sum(visitornumber), .groups = "drop") %>%
pivot_wider(names_from = visitor_nomenclature, values_from = visit_count, values_fill = 0) %>%
mutate(
richness = replace_na(specnumber(across(where(is.numeric), .names = "richness")), 0),
simpson = replace_na(diversity(across(where(is.numeric)), index = "simpson"), 0 ),
obs_doy = yday(date),
treatment = factor(treatment),
year = year(date)
) %>%
left_join(snowmelt, by = c("year", "site", "subplot", "treatment"))
visitor_sum = colnames(pollinators)[! colnames(pollinators) %in% c("date", "site", "subplot", "treatment", "richness", "simpson", "obs_doy", "year", "melt_doy", "tpi11", "slope", "elevation", "plot", "subplot_num", "treatment_num")]
pollinators_total = pollinators %>%
group_by(year, site, subplot, treatment) %>%
summarise(
total = sum(across(all_of(visitor_sum)), na.rm = TRUE),
max_simpson = obs_doy[which.max(simpson)],
max_richness = obs_doy[which.max(richness)],
melt_doy = first(melt_doy),
melt_doy = first(melt_doy),
elevation = first(elevation),
tpi11 = first(tpi11),
slope = first(slope),
.groups = "drop"
) %>%
mutate(
richness = replace_na(specnumber(across(where(is.numeric))), 0),
simpson = replace_na(diversity(across(where(is.numeric)), index = "simpson"), 0)
)
pollinators = visitors %>%
group_by(date, site, subplot, treatment, visitor_nomenclature) %>%
summarise(visit_count = sum(visitornumber), .groups = "drop") %>%
pivot_wider(names_from = visitor_nomenclature, values_from = visit_count, values_fill = 0) %>%
mutate(
richness = replace_na(specnumber(across(where(is.numeric), .names = "richness")), 0),
simpson = replace_na(diversity(across(where(is.numeric)), index = "simpson"), 0 ),
obs_doy = yday(date),
treatment = factor(treatment),
year = year(date)
) %>%
left_join(snowmelt, by = c("year", "site", "subplot", "treatment"))
visitor_sum = colnames(pollinators)[! colnames(pollinators) %in% c("date", "site", "subplot", "treatment", "richness", "simpson", "obs_doy", "year", "melt_doy", "tpi11", "slope", "elevation", "plot", "subplot_num", "treatment_num")]
pollinators_total = pollinators %>%
group_by(year, site, subplot, treatment) %>%
summarise(
total = sum(across(all_of(visitor_sum)), na.rm = TRUE),
max_simpson = obs_doy[which.max(simpson)],
max_richness = obs_doy[which.max(richness)],
melt_doy = first(melt_doy),
.groups = "drop"
) %>%
mutate(
richness = replace_na(specnumber(across(where(is.numeric))), 0),
simpson = replace_na(diversity(across(where(is.numeric)), index = "simpson"), 0)
)
pollinators_pairs = pollinators_total %>%
mutate(
treatment_pair = ifelse(treatment == "Early", "Control", "Early"),
melt_doy_other = melt_doy
) %>%
select(site, subplot, year, treatment_pair, melt_doy_other)
pollinators_total = pollinators_total %>%
left_join(
pollinators_pairs,
by = c("site", "subplot", "year", "treatment" = "treatment_pair")
) %>%
mutate(
complier = case_when(
treatment == "Control" & melt_doy > melt_doy_other ~ TRUE,
treatment == "Early" & melt_doy < melt_doy_other ~ TRUE,
TRUE ~ FALSE
)
) %>%
distinct(site, subplot, year, treatment, .keep_all = TRUE)
pollinators_total = pollinators %>%
group_by(year, site, subplot, treatment) %>%
summarise(
total = sum(across(all_of(visitor_sum)), na.rm = TRUE),
max_simpson = obs_doy[which.max(simpson)],
max_richness = obs_doy[which.max(richness)],
melt_doy = first(melt_doy),
elevation = first(elevation),
tpi11 = first(tpi11),
slope = first(slope),
.groups = "drop"
) %>%
mutate(
richness = replace_na(specnumber(across(where(is.numeric))), 0),
simpson = replace_na(diversity(across(where(is.numeric)), index = "simpson"), 0)
)
pollinators_total = pollinators %>%
group_by(year, site, subplot, treatment) %>%
summarise(
total = sum(across(all_of(visitor_sum)), na.rm = TRUE),
max_simpson = obs_doy[which.max(simpson)],
max_richness = obs_doy[which.max(richness)],
melt_doy = first(melt_doy),
elevation = first(elevation),
tpi11 = first(tpi11),
slope = first(slope),
.groups = "drop"
) %>%
mutate(
richness = replace_na(specnumber(across(all_of(visitor_sum))), 0),
simpson = replace_na(diversity(across(all_of(visitor_sum)), index = "simpson"), 0)
)
pollinators_total = pollinators %>%
group_by(year, site, subplot, treatment) %>%
summarise(
total = sum(across(all_of(visitor_sum)), na.rm = TRUE),
max_simpson = obs_doy[which.max(simpson)],
max_richness = obs_doy[which.max(richness)],
melt_doy = first(melt_doy),
elevation = first(elevation),
tpi11 = first(tpi11),
slope = first(slope),
.groups = "drop"
) %>%
mutate(
richness = replace_na(specnumber(across(all_of(visitor_sum))), 0),
simpson = replace_na(diversity(across(all_of(visitor_sum)), index = "simpson"), 0)
)
pollinators_total = pollinators %>%
group_by(year, site, subplot, treatment) %>%
summarise(
total = sum(across(all_of(visitor_sum)), na.rm = TRUE),
across(all_of(visitor_sum), sum, na.rm = TRUE),
max_simpson = obs_doy[which.max(simpson)],
max_richness = obs_doy[which.max(richness)],
melt_doy = first(melt_doy),
.groups = "drop"
) %>%
mutate(
richness = replace_na(specnumber(across(where(is.numeric))), 0),
simpson = replace_na(diversity(across(where(is.numeric)), index = "simpson"), 0)
) %>%
left_bind(
pollinators
)
pollinators_total = pollinators %>%
group_by(year, site, subplot, treatment) %>%
summarise(
total = sum(across(all_of(visitor_sum)), na.rm = TRUE),
across(all_of(visitor_sum), sum, na.rm = TRUE),
max_simpson = obs_doy[which.max(simpson)],
max_richness = obs_doy[which.max(richness)],
melt_doy = first(melt_doy),
.groups = "drop"
) %>%
mutate(
richness = replace_na(specnumber(across(where(is.numeric))), 0),
simpson = replace_na(diversity(across(where(is.numeric)), index = "simpson"), 0)
)
pollinators_pairs = pollinators_total %>%
mutate(
treatment_pair = ifelse(treatment == "Early", "Control", "Early"),
melt_doy_other = melt_doy
) %>%
select(site, subplot, year, treatment_pair, melt_doy_other)
pollinators_total = pollinators_total %>%
left_join(
pollinators_pairs,
by = c("site", "subplot", "year", "treatment" = "treatment_pair")
) %>%
mutate(
complier = case_when(
treatment == "Control" & melt_doy > melt_doy_other ~ TRUE,
treatment == "Early" & melt_doy < melt_doy_other ~ TRUE,
TRUE ~ FALSE
)
) %>%
distinct(site, subplot, year, treatment, .keep_all = TRUE)
diversity_ols = lm(simpson ~ melt_doy + slope + elevation + tpi11, data = pollinators_total)
pollinators_total = pollinators %>%
group_by(year, site, subplot, treatment) %>%
summarise(
total = sum(across(all_of(visitor_sum)), na.rm = TRUE),
across(all_of(visitor_sum), sum, na.rm = TRUE),
max_simpson = obs_doy[which.max(simpson)],
max_richness = obs_doy[which.max(richness)],
melt_doy = first(melt_doy),
slope = first(slope),
elevation = first(elevation),
tpi11 = first(tpi11),
.groups = "drop"
) %>%
mutate(
richness = replace_na(specnumber(across(where(is.numeric))), 0),
simpson = replace_na(diversity(across(where(is.numeric)), index = "simpson"), 0)
)
pollinators_total = pollinators %>%
group_by(year, site, subplot, treatment) %>%
summarise(
total = sum(across(all_of(visitor_sum)), na.rm = TRUE),
across(all_of(visitor_sum), sum, na.rm = TRUE),
max_simpson = obs_doy[which.max(simpson)],
max_richness = obs_doy[which.max(richness)],
melt_doy = first(melt_doy),
slope = first(slope),
elevation = first(elevation),
tpi11 = first(tpi11),
.groups = "drop"
) %>%
mutate(
richness = replace_na(specnumber(across(all_of(visitor_sum))), 0),
simpson = replace_na(diversity(across(all_of(visitor_sum)), index = "simpson"), 0)
)
pollinators_pairs = pollinators_total %>%
mutate(
treatment_pair = ifelse(treatment == "Early", "Control", "Early"),
melt_doy_other = melt_doy
) %>%
select(site, subplot, year, treatment_pair, melt_doy_other)
pollinators_total = pollinators_total %>%
left_join(
pollinators_pairs,
by = c("site", "subplot", "year", "treatment" = "treatment_pair")
) %>%
mutate(
complier = case_when(
treatment == "Control" & melt_doy > melt_doy_other ~ TRUE,
treatment == "Early" & melt_doy < melt_doy_other ~ TRUE,
TRUE ~ FALSE
)
) %>%
distinct(site, subplot, year, treatment, .keep_all = TRUE)
diversity_ols = lm(simpson ~ melt_doy + slope + elevation + tpi11, data = pollinators_total)
summary(diversity_ols)
diversity_ols = lm(simpson ~ melt_doy + slope + elevation + tpi11 + treatment + site, data = pollinators_total)
summary(diversity_ols)
twfe_lsdv = lm(max_simpson ~ treatment + factor(site) + factor(subplot), data = pollinators_total)
summary(twfe_lsdv)
twfe_lsdv = lm(max_richness ~ treatment + factor(site) + factor(subplot), data = pollinators_total)
summary(twfe_lsdv)
twfe_lsdv_late = lm(max_richness ~ treatment + factor(site) + factor(subplot), data = filter(pollinators_total, complier == T))
summary(twfe_lsdv_late)
# Run models and extract treatment term only
treatment_results <- map_dfr(outcomes, function(outcome) {
# Fit model
formula <- as.formula(paste(outcome, "~ treatment + elevation + slope + tpi11"))
model <- lm(formula, data = pollinators_total)
# Extract and filter for the treatment term
tidy(model) %>%
filter(str_detect(term, "treatment")) %>%
mutate(outcome = outcome)
})
outcomes <- c("max_simpson", "max_richness", "simpson", "richness")
# Run models and extract treatment term only
treatment_results <- map_dfr(outcomes, function(outcome) {
# Fit model
formula <- as.formula(paste(outcome, "~ treatment + elevation + slope + tpi11"))
model <- lm(formula, data = pollinators_total)
# Extract and filter for the treatment term
tidy(model) %>%
filter(str_detect(term, "treatment")) %>%
mutate(outcome = outcome)
})
# Optional: clean up and round
treatment_results_clean <- treatment_results %>%
select(outcome, term, estimate, std.error, p.value) %>%
mutate(across(c(estimate, std.error, p.value), round, digits = 3))
treatment_results_clean
# Run models and extract treatment term only
treatment_results <- map_dfr(outcomes, function(outcome) {
# Fit model
formula <- as.formula(paste(outcome, "~ treatment + site + subplot"))
model <- lm(formula, data = pollinators_total)
# Extract and filter for the treatment term
tidy(model) %>%
filter(str_detect(term, "treatment")) %>%
mutate(outcome = outcome)
})
# Optional: clean up and round
treatment_results_clean <- treatment_results %>%
select(outcome, term, estimate, std.error, p.value) %>%
mutate(across(c(estimate, std.error, p.value), round, digits = 3))
treatment_results_clean
# Run models and extract treatment term only
treatment_results <- map_dfr(outcomes, function(outcome) {
# Fit model
formula <- as.formula(paste(outcome, "~ treatment + site + subplot"))
model <- lm(formula, data = filter(pollinators_total, complier == T))
# Extract and filter for the treatment term
tidy(model) %>%
filter(str_detect(term, "treatment")) %>%
mutate(outcome = outcome)
})
# Optional: clean up and round
treatment_results_clean <- treatment_results %>%
select(outcome, term, estimate, std.error, p.value) %>%
mutate(across(c(estimate, std.error, p.value), round, digits = 3))
treatment_results_clean
twfe_lsdv_late = lm(simpson ~ treatment + factor(site) + factor(subplot), data = filter(pollinators_total, complier == T))
summary(twfe_lsdv_late)
# Run models and extract treatment term only
treatment_results <- map_dfr(outcomes, function(outcome) {
# Fit model
formula <- as.formula(paste(outcome, "~ treatment + site + subplot"))
model <- lm(formula, data = pollinators_total)
# Extract and filter for the treatment term
tidy(model) %>%
filter(str_detect(term, "treatment")) %>%
mutate(outcome = outcome)
})
# Optional: clean up and round
treatment_results_clean <- treatment_results %>%
select(outcome, term, estimate, std.error, p.value) %>%
mutate(across(c(estimate, std.error, p.value), round, digits = 3))
treatment_results_clean
nrow(filter(pollinators_total, complier == T))
gam_model = gam(
# treatment is included as an "additive factor" to account for varried intercepts (overall deeper snow in treatment v control)
depth ~ s(doy, by = treatment) + site + year + subplot + treatment,
data = snowdepth,
method = "REML"
)
summary(gam_model)
# non linear gam model to assess the relationship between doy and depth under "null" conditions (treatment not included in model)
gam_null <- gam(
depth ~ s(doy) + treatment + year + subplot + site,
data = snowdepth,
method = "REML"
)
summary(gam_null)
# anova demonstrates that the model where treatment is allowed to affect depth ~ doy spline is better than null model
anova(gam_model, gam_null, test = "Chisq")
gam_pollinator = gam(
# treatment is included as an "additive factor" to account for varried intercepts (overall deeper snow in treatment v control)
simpson ~ s(obs_doy, by = treatment) + site + subplot + treatment,
data = pollinators,
method = "REML"
)
summary(gam_pollinator)
# non linear gam model to assess the relationship between doy and depth under "null" conditions (treatment not included in model)
gam_pollinator_null = gam(
simpson ~ s(obs_doy) + site + year + subplot + treatment,
data = pollinators,
method = "REML"
)
summary(gam_pollinator_null)
# anova demonstrates that the model where treatment is allowed to affect depth ~ doy spline is better than null model
anova(gam_pollinator, gam_pollinator_null, test = "Chisq")
# Justify Instrument Using linear model -----
# Justify treatment as an instrumental variable by showing its correlation with snowmelt time/snowmelt advancement.
# Default lm regressing treatment variable on IV and other relevant factors.
#justify = lmer(melt_doy ~ treatment + (1 | subplot), data = snowmelt)
justify = lm(melt_doy ~ treatment + site + subplot + year, data = snowmelt)
# F test to see if the instrument explains enough of the explanatory variable
summary(justify)
ggplot(treatment_results_clean, aes(x = estimate, y = outcome)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
labs(
x = "Treatment Effect Estimate",
y = "Outcome Variable",
title = "Effect of Treatment on Pollinator Metrics"
) +
theme_minimal(base_size = 14)
outcomes <- c("max_simpson", "max_richness", "simpson", "richness")
# Run models and extract treatment term from both
treatment_results <- map_dfr(outcomes, function(outcome) {
formula <- as.formula(paste(outcome, "~ treatment + site + subplot"))
# Model on all data
model_all <- lm(formula, data = pollinators_total)
tidy(model_all) %>%
filter(str_detect(term, "treatment")) %>%
mutate(outcome = outcome, model_type = "All data") %>%
# Bind to model on compliers
bind_rows(
tidy(lm(formula, data = filter(pollinators_total, complier == TRUE))) %>%
filter(str_detect(term, "treatment")) %>%
mutate(outcome = outcome, model_type = "Compliers only")
)
})
# Optional: clean up
treatment_results_clean <- treatment_results %>%
select(outcome, model_type, term, estimate, std.error, p.value) %>%
mutate(across(c(estimate, std.error, p.value), round, digits = 3))
treatment_results_clean
# Optional: clean up
treatment_results_clean <- treatment_results %>%
select(outcome, model_type, term, estimate, std.error, p.value) %>%
mutate(across(c(estimate, std.error, p.value), round, digits = 3)) %>%
mutate(
pretty_outcome = case_when(
outcome == "simpson" & model_type == "All data"        ~ "Simpson Index (ATE)",
outcome == "simpson" & model_type == "Compliers only"  ~ "Simpson Index (LATE)",
outcome == "richness" & model_type == "All data"       ~ "Richness (ATE)",
outcome == "richness" & model_type == "Compliers only" ~ "Richness (LATE)",
outcome == "max_simpson" & model_type == "All data"    ~ "Max Simpson (ATE)",
outcome == "max_simpson" & model_type == "Compliers only" ~ "Max Simpson (LATE)",
outcome == "max_richness" & model_type == "All data"   ~ "Max Richness (ATE)",
outcome == "max_richness" & model_type == "Compliers only" ~ "Max Richness (LATE)",
TRUE ~ outcome  # fallback
)
)
ggplot(treatment_results_clean, aes(x = estimate, y = pretty_outcome)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
labs(
x = "Treatment Effect Estimate",
y = "Outcome",
title = "Treatment Effects (All Data vs. Compliers)"
) +
theme_minimal(base_size = 14)
ggplot(treatment_results_clean, aes(x = estimate, y = pretty_outcome)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
labs(
x = "Treatment Effect Estimate",
y = NA,
title = "Treatment Effect Sizes"
) +
theme_minimal(base_size = 14)
ggplot(treatment_results_clean, aes(x = estimate, y = pretty_outcome)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
labs(
x = "Treatment Effect Estimate",
title = "Treatment Effect Sizes"
) +
theme_minimal(base_size = 14)
ggplot(treatment_results_clean, aes(x = estimate, y = pretty_outcome)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
labs(
x = "Treatment Effect Estimate",
title = "Treatment Effect Sizes",
y = NULL
) +
theme_minimal(base_size = 14)
