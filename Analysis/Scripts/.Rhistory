# this line just reorganizes the Trial column to plot correctly later on
sprints$Trial <- factor(sprints$Trial, levels = c("Before", "After"))
head(sprints)
sprints <- data.frame(
"Person" = rep(c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J"), 2),
"Trial"  = c(rep("Before", 10), rep("After", 10)),
"Time"   = c(10.4,  8.8,  9.9,  9.5,  9.2,  9.6,  9.2,  10.9,  9.5,  8.5,
11.9, 8.9, 8.9, 10.7, 11.2,  9.9,  9.5, 10.8, 10.5, 9.5)
)
# this line just reorganizes the Trial column to plot correctly later on
sprints$Trial <- factor(sprints$Trial, levels = c("Before", "After"))
head(sprints)
t.test(Time ~ Trial, data = sprints)
stripchart(Time ~ Trial, data = sprints,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times")
stripchart(Time ~ Trial, data = sprints,
vertical = TRUE,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
aggregate(Time ~ Trial, data = sprints, FUN = mean)
mean_times <- aggregate(Time ~ Trial, data = sprints, FUN = mean)
# Get the names of each column:
names(mean_times)
mean_times$Trial
mean_times$Time
sd_times = aggregate(Time ~ Trial, data = springs, FUN = sd)
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
?barplot
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
times$mean = mean_times$Time
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
times = data.frame()
times$mean = mean_times$Time
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
times = data.frame(nrow = 2, ncol = 3)
times$mean = mean_times$Time
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
times = data.frame(mean_times$Trial, mean_times$Time, sd_times$Time)
times
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
times = NULL
times = data.frame(mean_times$Trial, mean_times$Time, sd_times$Time)
times
View(times)
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
times
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
times = data.frame(mean_times$Trial, mean_times$Time, sd_times$Time)
times
colnames(times) = c("treatmen", "mean", "sd")
times
barplot(data = times)
barplot(data = times, height = mean)
barplot(data = times, height = times$mean)
data <- read.csv(file.choose(),header=TRUE,na.string=".")
attach(data)
names(data)
data
View(data)
dependent <- c(mass_change)
independent <- c(salt_concentration)
regression <- lm(dependent~independent)
summary(regression)
plot(independent, dependent,xlab="Enter label for x-axis",ylab="Enter label for y-axis")
abline(reg=regression)
title(sub="Enter the title of your graph", cex.sub=1.25)
data <- read.csv(file.choose(),header=TRUE,na.string=".")
attach(data)
names(data)
data
View(data)
dependent <- c(mass_change)
independent <- c(salt_concentration)
regression <- lm(dependent~independent)
summary(regression)
?aggregate
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = c(sd, mean))
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
sprints <- data.frame(
"Person" = rep(c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J"), 2),
"Trial"  = c(rep("Before", 10), rep("After", 10)),
"Time"   = c(10.4,  8.8,  9.9,  9.5,  9.2,  9.6,  9.2,  10.9,  9.5,  8.5,
11.9, 8.9, 8.9, 10.7, 11.2,  9.9,  9.5, 10.8, 10.5, 9.5)
)
# this line just reorganizes the Trial column to plot correctly later on
sprints$Trial <- factor(sprints$Trial, levels = c("Before", "After"))
head(sprints)
t.test(Time ~ Trial, data = sprints)
stripchart(Time ~ Trial, data = sprints,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times")
stripchart(Time ~ Trial, data = sprints,
vertical = TRUE,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
aggregate(Time ~ Trial, data = sprints, FUN = mean)
mean_times <- aggregate(Time ~ Trial, data = sprints, FUN = mean)
# Get the names of each column:
names(mean_times)
mean_times$Trial
mean_times$Time
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = c(sd, mean))
?se
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = se_mean)
sd_times
View(sd_times)
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
ag_times = aggregate(Time ~ Trial, data = sprints, FUN = se_mean)
colnames(ag_times) = c("trial", "mean", "se")
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
ag_times = aggregate(Time ~ Trial, data = sprints, FUN = se_mean)
ag_times$Time
?join
?merge
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
ag_times
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
ag_times
ggplot(ag_times) +
geom_bar(aes(x=Trial, y=Times.y)) +
geom_errorbar(aes(x=Trial, ymin=Times.y - Times.x, ymax = Times.y + Times.x))
import(tidyverse)
ggplot(ag_times) +
geom_bar(aes(x=Trial, y=Times.y)) +
geom_errorbar(aes(x=Trial, ymin=Times.y - Times.x, ymax = Times.y + Times.x))
?import
library(tidyverse)
ggplot(ag_times) +
geom_bar(aes(x=Trial, y=Times.y)) +
geom_errorbar(aes(x=Trial, ymin=Times.y - Times.x, ymax = Times.y + Times.x))
View(ag_times)
gregate(Time ~ Trial, data = sprints, FUN = se)
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
colnames(ag_times) = c("trial", "se", "mean")
ag_times
ggplot(ag_times) +
geom_bar(aes(x=trial, y=mean)) +
geom_errorbar(aes(x=trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_bar(aes(height = trial)) +
geom_errorbar(aes(ymin=mean - se, ymax = mean + se))
?geom_bar
ggplot(ag_times) +
geom_bar(aes(y = trial)) +
geom_errorbar(aes(ymin=mean - se, ymax = mean + se))
?geom_errorbar
ggplot(ag_times) +
geom_bar(aes(y = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_col(aes(y = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_bar(aes(y = mean)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_bar(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
?geom_bar
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
View(sprints)
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab = "Mean Sprint Time" +
xlab = "Before or After Smoking"
?ylab
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab("Mean Sprint Time") +
xlab("Before or After Smoking")
library(tidyverse)
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
colnames(ag_times) = c("trial", "se", "mean")
ag_times
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab("Mean Sprint Time") +
xlab("Before or After Smoking")
library(tidyverse)
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
colnames(ag_times) = c("trial", "se", "mean")
ag_times
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab("Mean Sprint Time") +
xlab("Before or After Smoking")
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = , y = , pch = 16, cex = 1.2)
}
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = Trial, y = Time, pch = 16, cex = 1.2)
}
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15)), points(x = Trial, y = Time, pch = 16, cex = 1.2)
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = Trial, y = Time, pch = 16, cex = 1.2)
}
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = sprints$Trial, y = sprints$Time, pch = 16, cex = 1.2)
}
t.test(Time ~ Trial, data = sprints)
t.test(Time ~ Trial, data = sprints, paired = TRUE)
pigeons = read_csv("pigeons.csv")
head(pigeons)
{r}
ag_pigeons = aggregate(data = pigeons, Respons ~ Pigeon + Painting)
ag_pigeons = aggregate(data = pigeons, Respons ~ Pigeon + Painting)
ag_pigeons = aggregate(data = pigeons, Response ~ Pigeon + Painting)
ag_pigeons = aggregate(data = pigeons, Response ~ Pigeon + Painting, FUN = mean)
ag_pigeons
t.test(ag_pigeons)
?t.test
t.test(ag_pigeons$Painting, ag_pigeons$Response)
ag_pigeons = aggregate(data = pigeons, Response ~ Painting + Pigeon, FUN = mean)
ag_pigeons
t.test(ag_pigeons$Response, ag_pigeons$Painting)
t.test(ag_pigeons$Painting, ag_pigeons$Response)
t.test(ag_pigeons$Pigeon, ag_pigeons$Response)
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided")
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided")
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
ag_pigeons = aggregate(data = pigeons, Response ~ Painting + Pigeon, FUN = mean)
pigeons = read_csv("pigeons.csv")
library(tidyverse)
pigeons = read_csv("pigeons.csv")
head(pigeons)
ag_pigeons = aggregate(data = pigeons, Response ~ Painting + Pigeon, FUN = mean)
ag_pigeons
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
t.test(ag_pigeons$Painting, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
{
stripchart(Pigeon ~ Response, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 1))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 0.6))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "Pecks per Minute", xlab = "Pigeon",
main = "Pigeon Response to Good and Bad Paintings", ylim = c(0, 0.6))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
?t.test
bacteria = c(23.8, 26.2, 27.9, 22.2, 24.4, 25.8, 25.6, 29.1, 26.6, 26, 24.9, 23.3)
bacteria_t = t.test(bacteria, mu = 24, alternative = "two.sided")
bacteria_t
e^(-0.1 * 5)
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggdag")
install.packages("fixest")
### load libraries
library(tidyverse) ## for basic coding
library(data.table) ## for data manipulation
library(knitr) ## for rmarkdown
library(ggdag) ## for making a directed acyclic graph (DAG)
library(fixest) ## for fixed effects models
library(lme4) ## for regression models
### get rid of scientific notation
options(scipen = 999)
# Setup ----
library(tidyverse)
library(vegan)
library(ggpubr)
library(broom)
library(AER)
library(lme4)
library(MatchIt)
library(fixest)
library(mgcv)
library(gratia)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
flowercounts = read_csv("../Scratch/blacksand_flowercounts_2020.ar.data.csv")
topography = read_csv("../Scratch/blacksand_topography_2020.ar.data.csv")
visitors = read_csv("../Scratch/blacksand_visitors_2020.ar.data.csv")
#snowmelt = read_csv("../Scratch/snowmelt.csv")
snowdepth_raw = read_csv("../Scratch/black_sand_snow_depth.cf.data.csv")
# Clean snowmelt data to match pollinator data -----
names(snowdepth_raw) = c("LTER", "site", "year", "treatment", "subplot", "melt_doy")
snowdepth_raw$site = case_match(snowmelt$site, "East_Knoll" ~ "EastKnoll", .default = snowmelt$site)
names(snowdepth_raw) = c("LTER", "site", "year", "treatment", "subplot", "melt_doy")
snowdepth_raw$site = case_match(snowmelt$site, "East_Knoll" ~ "EastKnoll", .default = snowmelt$site)
snowdepth_clean <- snowdepth_raw %>%
setNames(c("LTER", "site", "year", "treatment", "subplot", "melt_doy")) %>%
mutate(
site = case_match(site, "East_Knoll" ~ "EastKnoll", .default = site),
subplot = case_match(subplot, "C" ~ "E", "B" ~ "C", .default = subplot)
)
snowdepth = snowdepth_raw %>%
setNames(c("site", "treatment", "subplot", "distance_from_top", "date", "depth", "comments")) %>%
filter(treatment != "", !is.na(treatment), depth != "NaN") %>%
mutate(
# rename subplot levels
subplot = case_when(
subplot == "Top" ~ "A",
subplot == "Topmiddle" ~ "B",
subplot == "Middle" ~ "C",
subplot == "Bottommiddle" ~ "D",
subplot == "Bottom" ~ "E",
.default = NA
),
# rename East Knoll
site = ifelse(site == "East_Knoll", "EastKnoll", site),
# get day-of-year for each date
doy = yday(date),
# convert snow depth
depth = as.numeric(depth),
# extract year from date
year = format(as.Date(date, format="%Y/%m/%d"),"%Y")
) %>%
# bind snowdepth data with topography data
left_join(topography, by = c("site", "subplot", "treatment")) %>%
mutate(treatment = as.factor(treatment))
snowdepth_soddie = filter(snowdepth, site != "Soddie")
snowdepth_lefty = filter(snowdepth, site != "Lefty")
snowdepth_three = filter(snowdepth, site != "Lefty" & site != "Soddie")
snowmelt = snowdepth %>%
mutate(
plot = paste(site, subplot)
) %>%
group_by(year, site, subplot, treatment) %>%
summarise(
melt_doy = if (any(depth == 0, na.rm = TRUE)) {
min(doy[depth == 0], na.rm = TRUE)
} else {
NA
},
.groups = "drop",
tpi11 = first(tpi11),
slope = first(slope),
elevation = first(elevation),
plot = first(plot)
) %>%
filter(!is.na(melt_doy)) %>%
mutate(year = as.numeric(year))
justify = lm(melt_doy ~ treatment + site + subplot + year, data = snowmelt)
#justify = feols(simpson_diversity ~ 1 | melt_doy ~ treatment, data = combined)
# F test to see if the instrument explains enough of the explanatory variable
summary(justify)
snowmelt_effect = ggplot(snowmelt, aes(x = treatment, y = melt_doy, fill = treatment)) +
geom_boxplot() +
labs(title = "Snowmelt Day Comparison Between Control and Treatment",
x = "Treatment",
y = "Snowmelt Day of Year") +
scale_fill_manual(values = c("Control" = "cyan", "Early" = "gray")) +  # Optional: choose your colors
theme_minimal() +
facet_wrap(~ year) # Create a separate subplot for each site
snowmelt_effect
snowmelt_effect = ggplot(snowmelt, aes(x = factor(year), y = melt_doy, fill = treatment)) +
geom_boxplot() +
labs(title = "Snowmelt Day Comparison Between Control and Treatment",
x = "Treatment",
y = "Snowmelt Day of Year") +
scale_fill_manual(values = c("Control" = "cyan", "Early" = "gray")) +  # Optional: choose your colors
theme_minimal() +
facet_wrap(~ site) # Create a separate subplot for each site
snowmelt_effect
snowmelt_effect = ggplot(snowmelt, aes(x = factor(year), y = melt_doy, fill = treatment)) +
geom_boxplot() +
labs(title = "Snowmelt Day Comparison Between Control and Treatment",
x = "Treatment",
y = "Snowmelt Day of Year") +
scale_fill_manual(values = c("Control" = "cyan", "Early" = "gray")) +  # Optional: choose your colors
theme_minimal() +
facet_wrap(~ site) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
snowmelt_effect
ggplot(filter(snowmelt, year == 2020), aes(x = slope, fill = factor(treatment))) +
geom_density(alpha = 0.5) +
labs(x = "Subplot Slope", y = "Density", fill = "Treatment") +
face_wrap(~subplot) +
theme_minimal()
ggplot(filter(snowmelt, year == 2020), aes(x = slope, fill = factor(treatment))) +
geom_density(alpha = 0.5) +
labs(x = "Subplot Slope", y = "Density", fill = "Treatment") +
facet_wrap(~subplot) +
theme_minimal()
nrow(filter(snowmelt, year == 2020 & subplot == "B"))
nrow(filter(snowmelt, year == 2020))
ggplot(filter(snowmelt, year == 2020), aes(x = tpi11, fill = factor(treatment))) +
geom_density(alpha = 0.5) +
labs(x = "Subplot (A-E) Slope", y = "Density", fill = "Treatment") +
facet_wrap(~subplot) +
theme_minimal()
ggplot(filter(snowmelt, year == 2020), aes(x = tpi11, fill = factor(treatment))) +
geom_density(alpha = 0.5) +
labs(x = "Subplot (A-E) TPI11", y = "Density", fill = "Treatment") +
facet_wrap(~subplot) +
theme_minimal()
