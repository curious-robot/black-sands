View(times)
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
times
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
times = data.frame(mean_times$Trial, mean_times$Time, sd_times$Time)
times
colnames(times) = c("treatmen", "mean", "sd")
times
barplot(data = times)
barplot(data = times, height = mean)
barplot(data = times, height = times$mean)
data <- read.csv(file.choose(),header=TRUE,na.string=".")
attach(data)
names(data)
data
View(data)
dependent <- c(mass_change)
independent <- c(salt_concentration)
regression <- lm(dependent~independent)
summary(regression)
plot(independent, dependent,xlab="Enter label for x-axis",ylab="Enter label for y-axis")
abline(reg=regression)
title(sub="Enter the title of your graph", cex.sub=1.25)
data <- read.csv(file.choose(),header=TRUE,na.string=".")
attach(data)
names(data)
data
View(data)
dependent <- c(mass_change)
independent <- c(salt_concentration)
regression <- lm(dependent~independent)
summary(regression)
?aggregate
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = c(sd, mean))
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
sprints <- data.frame(
"Person" = rep(c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J"), 2),
"Trial"  = c(rep("Before", 10), rep("After", 10)),
"Time"   = c(10.4,  8.8,  9.9,  9.5,  9.2,  9.6,  9.2,  10.9,  9.5,  8.5,
11.9, 8.9, 8.9, 10.7, 11.2,  9.9,  9.5, 10.8, 10.5, 9.5)
)
# this line just reorganizes the Trial column to plot correctly later on
sprints$Trial <- factor(sprints$Trial, levels = c("Before", "After"))
head(sprints)
t.test(Time ~ Trial, data = sprints)
stripchart(Time ~ Trial, data = sprints,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times")
stripchart(Time ~ Trial, data = sprints,
vertical = TRUE,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
aggregate(Time ~ Trial, data = sprints, FUN = mean)
mean_times <- aggregate(Time ~ Trial, data = sprints, FUN = mean)
# Get the names of each column:
names(mean_times)
mean_times$Trial
mean_times$Time
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = c(sd, mean))
?se
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = se_mean)
sd_times
View(sd_times)
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
ag_times = aggregate(Time ~ Trial, data = sprints, FUN = se_mean)
colnames(ag_times) = c("trial", "mean", "se")
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
ag_times = aggregate(Time ~ Trial, data = sprints, FUN = se_mean)
ag_times$Time
?join
?merge
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
ag_times
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
ag_times
ggplot(ag_times) +
geom_bar(aes(x=Trial, y=Times.y)) +
geom_errorbar(aes(x=Trial, ymin=Times.y - Times.x, ymax = Times.y + Times.x))
import(tidyverse)
ggplot(ag_times) +
geom_bar(aes(x=Trial, y=Times.y)) +
geom_errorbar(aes(x=Trial, ymin=Times.y - Times.x, ymax = Times.y + Times.x))
?import
library(tidyverse)
ggplot(ag_times) +
geom_bar(aes(x=Trial, y=Times.y)) +
geom_errorbar(aes(x=Trial, ymin=Times.y - Times.x, ymax = Times.y + Times.x))
View(ag_times)
gregate(Time ~ Trial, data = sprints, FUN = se)
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
colnames(ag_times) = c("trial", "se", "mean")
ag_times
ggplot(ag_times) +
geom_bar(aes(x=trial, y=mean)) +
geom_errorbar(aes(x=trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_bar(aes(height = trial)) +
geom_errorbar(aes(ymin=mean - se, ymax = mean + se))
?geom_bar
ggplot(ag_times) +
geom_bar(aes(y = trial)) +
geom_errorbar(aes(ymin=mean - se, ymax = mean + se))
?geom_errorbar
ggplot(ag_times) +
geom_bar(aes(y = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_col(aes(y = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_bar(aes(y = mean)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_bar(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
?geom_bar
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
View(sprints)
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab = "Mean Sprint Time" +
xlab = "Before or After Smoking"
?ylab
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab("Mean Sprint Time") +
xlab("Before or After Smoking")
library(tidyverse)
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
colnames(ag_times) = c("trial", "se", "mean")
ag_times
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab("Mean Sprint Time") +
xlab("Before or After Smoking")
library(tidyverse)
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
colnames(ag_times) = c("trial", "se", "mean")
ag_times
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab("Mean Sprint Time") +
xlab("Before or After Smoking")
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = , y = , pch = 16, cex = 1.2)
}
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = Trial, y = Time, pch = 16, cex = 1.2)
}
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15)), points(x = Trial, y = Time, pch = 16, cex = 1.2)
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = Trial, y = Time, pch = 16, cex = 1.2)
}
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = sprints$Trial, y = sprints$Time, pch = 16, cex = 1.2)
}
t.test(Time ~ Trial, data = sprints)
t.test(Time ~ Trial, data = sprints, paired = TRUE)
pigeons = read_csv("pigeons.csv")
head(pigeons)
{r}
ag_pigeons = aggregate(data = pigeons, Respons ~ Pigeon + Painting)
ag_pigeons = aggregate(data = pigeons, Respons ~ Pigeon + Painting)
ag_pigeons = aggregate(data = pigeons, Response ~ Pigeon + Painting)
ag_pigeons = aggregate(data = pigeons, Response ~ Pigeon + Painting, FUN = mean)
ag_pigeons
t.test(ag_pigeons)
?t.test
t.test(ag_pigeons$Painting, ag_pigeons$Response)
ag_pigeons = aggregate(data = pigeons, Response ~ Painting + Pigeon, FUN = mean)
ag_pigeons
t.test(ag_pigeons$Response, ag_pigeons$Painting)
t.test(ag_pigeons$Painting, ag_pigeons$Response)
t.test(ag_pigeons$Pigeon, ag_pigeons$Response)
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided")
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided")
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
ag_pigeons = aggregate(data = pigeons, Response ~ Painting + Pigeon, FUN = mean)
pigeons = read_csv("pigeons.csv")
library(tidyverse)
pigeons = read_csv("pigeons.csv")
head(pigeons)
ag_pigeons = aggregate(data = pigeons, Response ~ Painting + Pigeon, FUN = mean)
ag_pigeons
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
t.test(ag_pigeons$Painting, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
{
stripchart(Pigeon ~ Response, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 1))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 0.6))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "Pecks per Minute", xlab = "Pigeon",
main = "Pigeon Response to Good and Bad Paintings", ylim = c(0, 0.6))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
?t.test
bacteria = c(23.8, 26.2, 27.9, 22.2, 24.4, 25.8, 25.6, 29.1, 26.6, 26, 24.9, 23.3)
bacteria_t = t.test(bacteria, mu = 24, alternative = "two.sided")
bacteria_t
e^(-0.1 * 5)
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
flowercounts = read_csv("../Scratch/blacksand_flowercounts_2020.ar.data.csv")
geumexclusions = read_csv("../Scratch/blacksand_geumexclusions_2020.ar.data.csv")
geumindividualvisits = read_csv("../Scratch/blacksand_geumindividualvisits_2020.ar.data.csv")
topography = read_csv("blacksand_topography_2020.ar.data.csv")
topography = read_csv("../Scratch/blacksand_topography_2020.ar.data.csv")
visitors = read_csv("../Scratch/blacksand_visitors_2020.ar.data.csv")
View(visitors)
View(visitors)
View(topography)
View(topography)
View(geumindividualvisits)
View(geumindividualvisits)
View(flowercounts)
View(flowercounts)
pollinator_data_summary <- visitors %>%
group_by(date, site, visitor_nomenclature) %>%
summarise(visit_count = sum(visitornumber)) %>%
spread(key = visitor_nomenclature, value = visit_count, fill = 0)
# View the contingency table (optional)
head(pollinator_data_summary)
View(pollinator_data_summary)
View(pollinator_data_summary)
View(visitors)
View(visitors)
# Create a contingency table
pollinator_data_summary <- visitors %>%
group_by(date, site, subplot, visitor_nomenclature) %>%
summarise(visit_count = sum(visitornumber)) %>%
spread(key = visitor_nomenclature, value = visit_count, fill = 0)
# View the contingency table (optional)
head(pollinator_data_summary)
View(pollinator_data_summary)
View(pollinator_data_summary)
richness <- specnumber(pollinator_data_summary[,-c(1:3)])  # Excluding date, site, and subplot columns
library(vegan)
richness <- specnumber(pollinator_data_summary[,-c(1:3)])  # Excluding date, site, and subplot columns
print(richness)
pollinator_data_summary:richness <- specnumber(pollinator_data_summary[,-c(1:3)])  # Excluding date, site, and subplot columns
pollinator_data_summary:richness <- specnumber(pollinator_data_summary[,-c(1:3)])  # Excluding date, site, and subplot columns
pollinator_data_summary$richness <- specnumber(pollinator_data_summary[,-c(1:3)])  # Excluding date, site, and subplot columns
# Calculate Shannon Diversity Index
pollinator_data_summary$shannon_diversity <- diversity(pollinator_data_summary[,-c(1:3)], index = "shannon")
pollinator_data_summary$simpson_diversity <- diversity(pollinator_data_summary[,-c(1:3)], index = "simpson")
# Create a data frame for plotting
diversity_df <- data.frame(date = pollinator_data_summary$date, Simpson = simpson_diversity)
# Calculate Shannon Diversity Index
pollinator_data_summary$simpson_diversity <- diversity(pollinator_data_summary[,-c(1:3)], index = "simpson")
# Create a data frame for plotting
diversity_df <- data.frame(date = pollinator_data_summary$date, Simpson = simpson_diversity)
# Add statistical comparisons (e.g., t-test)
ggplot(pollinator_data_summary, aes(x = treatment, y = simpson_diversity, fill = treatment)) +
geom_boxplot() +
facet_wrap(~site) +
stat_compare_means(method = "t.test") +  # t-test between treatments
theme_minimal() +
labs(title = "Shannon Diversity Index by Treatment and Site", x = "Treatment", y = "Shannon Diversity Index") +
scale_fill_manual(values = c("Control" = "skyblue", "Early" = "orange"))
library(ggpubr)
# Add statistical comparisons (e.g., t-test)
ggplot(pollinator_data_summary, aes(x = treatment, y = simpson_diversity, fill = treatment)) +
geom_boxplot() +
facet_wrap(~site) +
stat_compare_means(method = "t.test") +  # t-test between treatments
theme_minimal() +
labs(title = "Shannon Diversity Index by Treatment and Site", x = "Treatment", y = "Shannon Diversity Index") +
scale_fill_manual(values = c("Control" = "skyblue", "Early" = "orange"))
knitr::opts_chunk$set(echo = TRUE)
### Install package if you need to
install.packages("AER",
repos = "http://cran.us.r-project.org")
### Load required libraries
library(AER)
library(tidyverse)
### Write function to simulate a dataset
simulate_data <- function(){
## Create data variables within data.frame
## Make a column for observation ID
df <- data.frame(id = seq(1, 1000),
## Columns for covariates
slope = runif(1000, min = 50, max = 100),
elevation = runif(1000, min = 150, max = 185),
dist_cities = runif(1000, min = 0, max = 250),
## Unobserved variable
local_inst = rnorm(1000, mean = 49, sd = 17),
## A column for the error term
error = rnorm(1000, mean = 0, sd = 5),
### The instrumental variable
dist_tributary = rnorm(1000, mean = 400, sd = 140))
### Add columns for treatment (level of forest protection) and response (monthly household consumption)
df <- df %>%
### Add column for the treatment variable, related to the IV
mutate(forest_protect = 0.2*dist_tributary + 0.4*local_inst +
rnorm(100, 0, 1)) %>%
### Add column for the outcome variable
mutate(consumpt = 5*forest_protect +
0.07*slope + 0.05*elevation + 2*dist_cities +
10*local_inst + error)
return(df)
}
# Plot Shannon Diversity Index over time
library(ggplot2)
ggplot(diversity_df, aes(x = date, y = Simpson)) +
geom_line() +
theme_minimal() +
labs(title = "Simpson Diversity Index over Time", x = "Date", y = "Simpson Diversity Index")
diversity_df <- data.frame(date = pollinator_data_summary$date, Simpson = simpson_diversity)
diversity_df <- data.frame(date = pollinator_data_summary$date, Simpson = simpson)
pollinator_data_summary$simpson_diversity <- diversity(pollinator_data_summary[,-c(1:3)], index = "simpson")
diversity_df <- data.frame(date = pollinator_data_summary$date, Simpson = simpson_diversity)
diversity_df <- data.frame(date = pollinator_data_summary$date, Simpson = pollinator_data_summary$simpson_diversity)
library(ggplot2)
ggplot(diversity_df, aes(x = date, y = Simpson)) +
geom_line() +
theme_minimal() +
labs(title = "Simpson Diversity Index over Time", x = "Date", y = "Simpson Diversity Index")
# Add statistical comparisons (e.g., t-test)
ggplot(pollinator_data_summary, aes(x = treatment, y = simpson_diversity, fill = treatment)) +
geom_boxplot() +
facet_wrap(~site) +
stat_compare_means(method = "t.test") +  # t-test between treatments
theme_minimal() +
labs(title = "Shannon Diversity Index by Treatment and Site", x = "Treatment", y = "Shannon Diversity Index") +
scale_fill_manual(values = c("Control" = "skyblue", "Early" = "orange"))
View(pollinator_data_summary)
pollinator_data_summary <- visitors %>%
group_by(date, site, subplot, treatment, visitor_nomenclature) %>%
summarise(visit_count = sum(visitornumber)) %>%
spread(key = visitor_nomenclature, value = visit_count, fill = 0)
pollinator_data_summary$richness <- specnumber(pollinator_data_summary[,-c(1:3)])  # Excluding date, site, and subplot columns
# Add statistical comparisons (e.g., t-test)
ggplot(pollinator_data_summary, aes(x = treatment, y = simpson_diversity, fill = treatment)) +
geom_boxplot() +
facet_wrap(~site) +
stat_compare_means(method = "t.test") +  # t-test between treatments
theme_minimal() +
labs(title = "Shannon Diversity Index by Treatment and Site", x = "Treatment", y = "Shannon Diversity Index") +
scale_fill_manual(values = c("Control" = "skyblue", "Early" = "orange"))
# Calculate Shannon Diversity Index
pollinator_data_summary$simpson_diversity <- diversity(pollinator_data_summary[,-c(1:3)], index = "simpson")
pollinator_data_summary <- visitors %>%
group_by(date, site, subplot, treatment, visitor_nomenclature) %>%
summarise(visit_count = sum(visitornumber)) %>%
spread(key = visitor_nomenclature, value = visit_count, fill = 0)
# View the contingency table (optional)
head(pollinator_data_summary)
pollinator_data_summary$richness <- specnumber(pollinator_data_summary[,-c(1:3)])  # Excluding date, site, and subplot columns
# Calculate Shannon Diversity Index
pollinator_data_summary$simpson_diversity <- diversity(pollinator_data_summary[,-c(1:3)], index = "simpson")
View(pollinator_data_summary)
pollinator_data_summary$simpson_diversity <- diversity(pollinator_data_summary[,-c(1:4)], index = "simpson")
# Create a data frame for plotting
diversity_df <- data.frame(date = pollinator_data_summary$date, Simpson = pollinator_data_summary$simpson_diversity)
# Plot Shannon Diversity Index over time
# Add statistical comparisons (e.g., t-test)
ggplot(pollinator_data_summary, aes(x = treatment, y = simpson_diversity, fill = treatment)) +
geom_boxplot() +
facet_wrap(~site) +
stat_compare_means(method = "t.test") +  # t-test between treatments
theme_minimal() +
labs(title = "Shannon Diversity Index by Treatment and Site", x = "Treatment", y = "Shannon Diversity Index") +
scale_fill_manual(values = c("Control" = "skyblue", "Early" = "orange"))
ggplot(pollinator_data_summary, aes(x = treatment, y = simpson_diversity, fill = treatment)) +
geom_boxplot() +
facet_wrap(~site) +
stat_compare_means(method = "t.test") +  # t-test between treatments
theme_minimal() +
labs(title = "Shannon Diversity Index by Treatment and Site", x = "Treatment", y = "Shannon Diversity Index") +
scale_fill_manual(values = c("Control" = "skyblue", "Early" = "orange")) +
ylim(0, max(pollinator_data_summary$shannon_diversity, na.rm = TRUE) + 1)
ggplot(pollinator_data_summary, aes(x = treatment, y = simpson_diversity, fill = treatment)) +
geom_boxplot() +
facet_wrap(~site) +
stat_compare_means(method = "t.test") +  # t-test between treatments
theme_minimal() +
labs(title = "Shannon Diversity Index by Treatment and Site", x = "Treatment", y = "Shannon Diversity Index") +
scale_fill_manual(values = c("Control" = "skyblue", "Early" = "orange")) +
ylim(0, 2)
ggplot(pollinator_data_summary, aes(x = treatment, y = simpson_diversity, fill = treatment)) +
geom_boxplot() +
facet_wrap(~site) +
stat_compare_means(method = "t.test") +  # t-test between treatments
theme_minimal() +
labs(title = "Shannon Diversity Index by Treatment and Site", x = "Treatment", y = "Shannon Diversity Index") +
scale_fill_manual(values = c("Control" = "skyblue", "Early" = "orange")) +
ylim(-2, 2)
ggplot(pollinator_data_summary, aes(x = treatment, y = simpson_diversity, fill = treatment)) +
geom_boxplot() +
facet_wrap(~site) +
stat_compare_means(method = "t.test") +  # t-test between treatments
theme_minimal() +
labs(title = "Shannon Diversity Index by Treatment and Site", x = "Treatment", y = "Shannon Diversity Index") +
scale_fill_manual(values = c("Control" = "skyblue", "Early" = "orange")) +
ylim(0, 1)
