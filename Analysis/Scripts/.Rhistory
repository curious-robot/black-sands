sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
times = data.frame(mean_times$Trial, mean_times$Time, sd_times$Time)
times
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
times = NULL
times = data.frame(mean_times$Trial, mean_times$Time, sd_times$Time)
times
View(times)
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
times
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = sd)
sd_times
times = data.frame(mean_times$Trial, mean_times$Time, sd_times$Time)
times
colnames(times) = c("treatmen", "mean", "sd")
times
barplot(data = times)
barplot(data = times, height = mean)
barplot(data = times, height = times$mean)
data <- read.csv(file.choose(),header=TRUE,na.string=".")
attach(data)
names(data)
data
View(data)
dependent <- c(mass_change)
independent <- c(salt_concentration)
regression <- lm(dependent~independent)
summary(regression)
plot(independent, dependent,xlab="Enter label for x-axis",ylab="Enter label for y-axis")
abline(reg=regression)
title(sub="Enter the title of your graph", cex.sub=1.25)
data <- read.csv(file.choose(),header=TRUE,na.string=".")
attach(data)
names(data)
data
View(data)
dependent <- c(mass_change)
independent <- c(salt_concentration)
regression <- lm(dependent~independent)
summary(regression)
?aggregate
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = c(sd, mean))
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
sprints <- data.frame(
"Person" = rep(c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J"), 2),
"Trial"  = c(rep("Before", 10), rep("After", 10)),
"Time"   = c(10.4,  8.8,  9.9,  9.5,  9.2,  9.6,  9.2,  10.9,  9.5,  8.5,
11.9, 8.9, 8.9, 10.7, 11.2,  9.9,  9.5, 10.8, 10.5, 9.5)
)
# this line just reorganizes the Trial column to plot correctly later on
sprints$Trial <- factor(sprints$Trial, levels = c("Before", "After"))
head(sprints)
t.test(Time ~ Trial, data = sprints)
stripchart(Time ~ Trial, data = sprints,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times")
stripchart(Time ~ Trial, data = sprints,
vertical = TRUE,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
aggregate(Time ~ Trial, data = sprints, FUN = mean)
mean_times <- aggregate(Time ~ Trial, data = sprints, FUN = mean)
# Get the names of each column:
names(mean_times)
mean_times$Trial
mean_times$Time
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = c(sd, mean))
?se
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
sd_times = aggregate(Time ~ Trial, data = sprints, FUN = se_mean)
sd_times
View(sd_times)
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
ag_times = aggregate(Time ~ Trial, data = sprints, FUN = se_mean)
colnames(ag_times) = c("trial", "mean", "se")
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
ag_times = aggregate(Time ~ Trial, data = sprints, FUN = se_mean)
ag_times$Time
?join
?merge
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
ag_times
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
ag_times
ggplot(ag_times) +
geom_bar(aes(x=Trial, y=Times.y)) +
geom_errorbar(aes(x=Trial, ymin=Times.y - Times.x, ymax = Times.y + Times.x))
import(tidyverse)
ggplot(ag_times) +
geom_bar(aes(x=Trial, y=Times.y)) +
geom_errorbar(aes(x=Trial, ymin=Times.y - Times.x, ymax = Times.y + Times.x))
?import
library(tidyverse)
ggplot(ag_times) +
geom_bar(aes(x=Trial, y=Times.y)) +
geom_errorbar(aes(x=Trial, ymin=Times.y - Times.x, ymax = Times.y + Times.x))
View(ag_times)
gregate(Time ~ Trial, data = sprints, FUN = se)
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
colnames(ag_times) = c("trial", "se", "mean")
ag_times
ggplot(ag_times) +
geom_bar(aes(x=trial, y=mean)) +
geom_errorbar(aes(x=trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_bar(aes(height = trial)) +
geom_errorbar(aes(ymin=mean - se, ymax = mean + se))
?geom_bar
ggplot(ag_times) +
geom_bar(aes(y = trial)) +
geom_errorbar(aes(ymin=mean - se, ymax = mean + se))
?geom_errorbar
ggplot(ag_times) +
geom_bar(aes(y = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_col(aes(y = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_bar(aes(y = mean)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_bar(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
?geom_bar
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
View(sprints)
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab = "Mean Sprint Time" +
xlab = "Before or After Smoking"
?ylab
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab("Mean Sprint Time") +
xlab("Before or After Smoking")
library(tidyverse)
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
colnames(ag_times) = c("trial", "se", "mean")
ag_times
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab("Mean Sprint Time") +
xlab("Before or After Smoking")
library(tidyverse)
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
colnames(ag_times) = c("trial", "se", "mean")
ag_times
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab("Mean Sprint Time") +
xlab("Before or After Smoking")
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = , y = , pch = 16, cex = 1.2)
}
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = Trial, y = Time, pch = 16, cex = 1.2)
}
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15)), points(x = Trial, y = Time, pch = 16, cex = 1.2)
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = Trial, y = Time, pch = 16, cex = 1.2)
}
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = sprints$Trial, y = sprints$Time, pch = 16, cex = 1.2)
}
t.test(Time ~ Trial, data = sprints)
t.test(Time ~ Trial, data = sprints, paired = TRUE)
pigeons = read_csv("pigeons.csv")
head(pigeons)
{r}
ag_pigeons = aggregate(data = pigeons, Respons ~ Pigeon + Painting)
ag_pigeons = aggregate(data = pigeons, Respons ~ Pigeon + Painting)
ag_pigeons = aggregate(data = pigeons, Response ~ Pigeon + Painting)
ag_pigeons = aggregate(data = pigeons, Response ~ Pigeon + Painting, FUN = mean)
ag_pigeons
t.test(ag_pigeons)
?t.test
t.test(ag_pigeons$Painting, ag_pigeons$Response)
ag_pigeons = aggregate(data = pigeons, Response ~ Painting + Pigeon, FUN = mean)
ag_pigeons
t.test(ag_pigeons$Response, ag_pigeons$Painting)
t.test(ag_pigeons$Painting, ag_pigeons$Response)
t.test(ag_pigeons$Pigeon, ag_pigeons$Response)
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided")
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided")
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
ag_pigeons = aggregate(data = pigeons, Response ~ Painting + Pigeon, FUN = mean)
pigeons = read_csv("pigeons.csv")
library(tidyverse)
pigeons = read_csv("pigeons.csv")
head(pigeons)
ag_pigeons = aggregate(data = pigeons, Response ~ Painting + Pigeon, FUN = mean)
ag_pigeons
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
t.test(ag_pigeons$Painting, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
{
stripchart(Pigeon ~ Response, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 1))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 0.6))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "Pecks per Minute", xlab = "Pigeon",
main = "Pigeon Response to Good and Bad Paintings", ylim = c(0, 0.6))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
?t.test
bacteria = c(23.8, 26.2, 27.9, 22.2, 24.4, 25.8, 25.6, 29.1, 26.6, 26, 24.9, 23.3)
bacteria_t = t.test(bacteria, mu = 24, alternative = "two.sided")
bacteria_t
e^(-0.1 * 5)
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggdag")
install.packages("fixest")
### load libraries
library(tidyverse) ## for basic coding
library(data.table) ## for data manipulation
library(knitr) ## for rmarkdown
library(ggdag) ## for making a directed acyclic graph (DAG)
library(fixest) ## for fixed effects models
library(lme4) ## for regression models
### get rid of scientific notation
options(scipen = 999)
knitr::opts_chunk$set(echo = TRUE)
### Install package if you need to
install.packages("AER",
repos = "http://cran.us.r-project.org")
### Load required libraries
library(AER)
library(tidyverse)
### Write function to simulate a dataset
simulate_data <- function(){
## Create data variables within data.frame
## Make a column for observation ID
df <- data.frame(id = seq(1, 1000),
## Columns for covariates
slope = runif(1000, min = 50, max = 100),
elevation = runif(1000, min = 150, max = 185),
dist_cities = runif(1000, min = 0, max = 250),
## Unobserved variable
local_inst = rnorm(1000, mean = 49, sd = 17),
## A column for the error term
error = rnorm(1000, mean = 0, sd = 5),
### The instrumental variable
dist_tributary = rnorm(1000, mean = 400, sd = 140))
### Add columns for treatment (level of forest protection) and response (monthly household consumption)
df <- df %>%
### Add column for the treatment variable, related to the IV
mutate(forest_protect = 0.2*dist_tributary + 0.4*local_inst +
rnorm(100, 0, 1)) %>%
### Add column for the outcome variable
mutate(consumpt = 5*forest_protect +
0.07*slope + 0.05*elevation + 2*dist_cities +
10*local_inst + error)
return(df)
}
### Write a function to generate data and analyze using OLS
ols_fun = function(){
## Simulate the dataset
data <- simulate_data()
## Run OLS
ols <- lm(consumpt ~ forest_protect + slope + elevation +
dist_cities, data = data)
## Extract model coefficients and standard error
protect_coeff <- coef(summary(ols))["forest_protect", "Estimate"]
protect_se <- coef(summary(ols))["forest_protect", "Std. Error"]
list <- list(protect_coeff, protect_se)
}
### Apply the function on 1000 replicates
ols_sim <- replicate(100, ols_fun())
### Extract the model estimates
ols_protect_est <- unlist(ols_sim[1, ])
### Print mean, standard deviation, minimum, and maximum values for coefficient estimates
c(mean(ols_protect_est), sd(ols_protect_est),
min(ols_protect_est), max(ols_protect_est))
### Extract the standard deviations
ols_protect_sd <- unlist(ols_sim[2, ])
### Print mean, standard deviation, minimum, and maximum
### standard deviation of coefficient estimates
c(mean(ols_protect_sd), sd(ols_protect_sd),
min(ols_protect_sd), max(ols_protect_sd))
### Write a function to generate data and analyze using IV
iv_tsls_fun = function(){
## Simulate the dataset
data <- simulate_data()
## Step 1
## Regress the percent of protected forest on the other explanatory variables
## and our instrumental variable
tsls_step1 <- lm(forest_protect ~ slope + elevation +
dist_cities + dist_tributary, data = data)
## Extract fitted values of the percent of protected forest
pred_value <- fitted.values(tsls_step1)
## Step 2
## Regress our outcome of interest on the predicted value of the treatment +
## the other explanatory variables
tsls_step2 <- lm(consumpt ~ pred_value + slope + elevation + dist_cities,
data = data)
## Extract model coefficients and standard error
iv_coeff <- coef(summary(tsls_step2))["pred_value", "Estimate"]
iv_se <- coef(summary(tsls_step2))["pred_value", "Std. Error"]
list <- list(iv_coeff, iv_se)
}
### Apply the function on 100 replicates
iv_tsls_sim <- replicate(100, iv_tsls_fun())
### Extract the model estimates
iv_tsls_est <- unlist(iv_tsls_sim[1, ])
### Print mean, standard deviation, minimum, and maximum values for coefficient estimates
c(mean(iv_tsls_est), sd(iv_tsls_est),
min(iv_tsls_est), max(iv_tsls_est))
### Extract the standard deviations
iv_tsls_est_sd <- unlist(iv_tsls_sim[2, ])
### Print mean, standard deviation, minimum, and maximum standard deviation
### of coefficient estimates
c(mean(iv_tsls_est_sd), sd(iv_tsls_est_sd),
min(iv_tsls_est_sd), max(iv_tsls_est_sd))
snowmelt <- read_csv("../Scratch/black_sand_itex_snowmelt.cf.data")
snowmelt <- snowmelt_raw %>%
pivot_wider(names_from = snow_treatment, values_from = snowmelt_doy) %>%
mutate(diff = Early - Control) %>%
select(local_site, year, diff)
snowmelt_raw <- read_csv("../Scratch/black_sand_itex_snowmelt.cf.data")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
snowmelt_raw <- read_csv("../Scratch/black_sand_itex_snowmelt.cf.data")
flowercounts = read_csv("../Scratch/blacksand_flowercounts_2020.ar.data.csv")
snowmelt_raw <- read_csv("../Scratch/black_sand_itex_snowmelt.cf.data")
snowmelt_raw <- read_csv("../Scratch/black_sand_itex_snowmelt.cf.data.csv")
snowmelt <- snowmelt_raw %>%
pivot_wider(names_from = snow_treatment, values_from = snowmelt_doy) %>%
mutate(diff = Early - Control) %>%
select(local_site, year, diff)
head(snowmelt)
snowmelt <- snowmelt_raw %>%
pivot_wider(names_from = snow_treatment, values_from = snowmelt_doy) %>%
mutate(diff = Control - Early) %>%
select(local_site, year, diff, block)
snowmelt <- snowmelt_raw %>%
pivot_wider(names_from = snow_treatment, values_from = snowmelt_doy) %>%
mutate(diff = Control - Early) %>%
select(local_site, year, diff, block)
head(snowmelt)
snowmelt_ttest <- snowmelt_raw %>%
group_by(local_site) %>%
do(tidy(t.test(snowmelt_doy ~ snow_treatment, data = .)))
snowmelt_ttest <- snowmelt_raw %>%
group_by(local_site) %>%
do(t.test(snowmelt_doy ~ snow_treatment, data = .))
library(broom)
library(broom)
snowmelt_ttest <- snowmelt_raw %>%
group_by(local_site) %>%
do(tidy(t.test(snowmelt_doy ~ snow_treatment, data = .)))
print(snowmelt_ttest)
print(snowmelt_ttest)
snowmelt_ttest <- snowmelt_raw %>%
group_by(local_site) %>%
do(tidy(lm(snowmelt_doy ~ snow_treatment, data = .)))
print(snowmelt_ttest)
snowmelt_ttest <- snowmelt_raw %>%
group_by(local_site) %>%
do(tidy(lm(snowmelt_doy ~ snow_treatment + block, data = .)))
print(snowmelt_ttest)
snowmelt_ttest <- snowmelt_raw %>%
group_by(local_site) %>%
do(tidy(lm(snowmelt_doy ~ snow_treatment, data = .)))
print(snowmelt_ttest)
snowmelt_ttest <- snowmelt_raw %>%
group_by(local_site) %>%
do(tidy(lm(snowmelt_doy ~ snow_treatment, data = .)))
print(snowmelt_ttest)
snowmelt_lm <- snowmelt_raw %>%
group_by(local_site) %>%
do(tidy(lm(snowmelt_doy ~ snow_treatment, data = .)))
print(snowmelt_lm)
ggplot(snowmelt, aes(x = year, y = diff, color = local_site)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Change in Snowmelt Difference by Year and Site",
x = "Year",
y = "Difference in Snowmelt DOY (Early - Control)",
color = "Local Site") +
theme_minimal()
ggplot(snowmelt, aes(x = year, y = diff, color = local_site)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "Change in Snowmelt Difference by Year and Site",
x = "Year",
y = "Difference in Snowmelt Day",
color = "Site") +
theme_minimal()
snowmelt_lm <- snowmelt_raw %>%
group_by(local_site) %>%
lm(snowmelt_doy ~ snow_treatment + site, data = .)
snowmelt_lm <- snowmelt_raw %>%
group_by(local_site) %>%
lm(snowmelt_doy ~ snow_treatment + local_site, data = .)
head(snowmelt_lm)
head(tidy(snowmelt_lm))
