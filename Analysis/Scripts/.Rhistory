?merge
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
ag_times
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
ag_times
ggplot(ag_times) +
geom_bar(aes(x=Trial, y=Times.y)) +
geom_errorbar(aes(x=Trial, ymin=Times.y - Times.x, ymax = Times.y + Times.x))
import(tidyverse)
ggplot(ag_times) +
geom_bar(aes(x=Trial, y=Times.y)) +
geom_errorbar(aes(x=Trial, ymin=Times.y - Times.x, ymax = Times.y + Times.x))
?import
library(tidyverse)
ggplot(ag_times) +
geom_bar(aes(x=Trial, y=Times.y)) +
geom_errorbar(aes(x=Trial, ymin=Times.y - Times.x, ymax = Times.y + Times.x))
View(ag_times)
gregate(Time ~ Trial, data = sprints, FUN = se)
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
colnames(ag_times) = c("trial", "se", "mean")
ag_times
ggplot(ag_times) +
geom_bar(aes(x=trial, y=mean)) +
geom_errorbar(aes(x=trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_bar(aes(height = trial)) +
geom_errorbar(aes(ymin=mean - se, ymax = mean + se))
?geom_bar
ggplot(ag_times) +
geom_bar(aes(y = trial)) +
geom_errorbar(aes(ymin=mean - se, ymax = mean + se))
?geom_errorbar
ggplot(ag_times) +
geom_bar(aes(y = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_col(aes(y = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_bar(aes(y = mean)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
ggplot(ag_times) +
geom_bar(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
?geom_bar
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se))
View(sprints)
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab = "Mean Sprint Time" +
xlab = "Before or After Smoking"
?ylab
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab("Mean Sprint Time") +
xlab("Before or After Smoking")
library(tidyverse)
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
colnames(ag_times) = c("trial", "se", "mean")
ag_times
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab("Mean Sprint Time") +
xlab("Before or After Smoking")
library(tidyverse)
se_mean = function(x) {
y = mean(x)
z = sd(x)/sqrt(length(x))
return(c(y, z))
}
se = function(x) {
return(sd(x)/sqrt(length(x)))
}
se_times = aggregate(Time ~ Trial, data = sprints, FUN = se)
mean_times = aggregate(Time ~ Trial, data = sprints, FUN = mean)
ag_times = merge(se_times, mean_times, by = "Trial")
colnames(ag_times) = c("trial", "se", "mean")
ag_times
ggplot(ag_times) +
geom_col(aes(y = mean, x = trial)) +
geom_errorbar(aes(x = trial, ymin=mean - se, ymax = mean + se)) +
ylab("Mean Sprint Time") +
xlab("Before or After Smoking")
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = , y = , pch = 16, cex = 1.2)
}
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = Trial, y = Time, pch = 16, cex = 1.2)
}
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15)), points(x = Trial, y = Time, pch = 16, cex = 1.2)
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = Trial, y = Time, pch = 16, cex = 1.2)
}
{
stripchart(Time ~ Trial, data = sprints, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = sprints$Trial, y = sprints$Time, pch = 16, cex = 1.2)
}
t.test(Time ~ Trial, data = sprints)
t.test(Time ~ Trial, data = sprints, paired = TRUE)
pigeons = read_csv("pigeons.csv")
head(pigeons)
{r}
ag_pigeons = aggregate(data = pigeons, Respons ~ Pigeon + Painting)
ag_pigeons = aggregate(data = pigeons, Respons ~ Pigeon + Painting)
ag_pigeons = aggregate(data = pigeons, Response ~ Pigeon + Painting)
ag_pigeons = aggregate(data = pigeons, Response ~ Pigeon + Painting, FUN = mean)
ag_pigeons
t.test(ag_pigeons)
?t.test
t.test(ag_pigeons$Painting, ag_pigeons$Response)
ag_pigeons = aggregate(data = pigeons, Response ~ Painting + Pigeon, FUN = mean)
ag_pigeons
t.test(ag_pigeons$Response, ag_pigeons$Painting)
t.test(ag_pigeons$Painting, ag_pigeons$Response)
t.test(ag_pigeons$Pigeon, ag_pigeons$Response)
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided")
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided")
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
ag_pigeons = aggregate(data = pigeons, Response ~ Painting + Pigeon, FUN = mean)
pigeons = read_csv("pigeons.csv")
library(tidyverse)
pigeons = read_csv("pigeons.csv")
head(pigeons)
ag_pigeons = aggregate(data = pigeons, Response ~ Painting + Pigeon, FUN = mean)
ag_pigeons
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
t.test(ag_pigeons$Painting, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
t.test(ag_pigeons$Pigeon, ag_pigeons$Response, alternative = "two.sided", paired = TRUE)
{
stripchart(Pigeon ~ Response, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 15))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 1))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "50 m sprint time (s)", xlab = "Before or After Smoking",
main = "Effect of Smoking on Sprint Times", ylim = c(0, 0.6))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
{
stripchart(Response ~ Pigeon, data = ag_pigeons, method = "jitter",
vertical = TRUE,
ylab = "Pecks per Minute", xlab = "Pigeon",
main = "Pigeon Response to Good and Bad Paintings", ylim = c(0, 0.6))
points(x = ag_pigeons$Trial, y = ag_pigeons$Time, pch = 16, cex = 1.2)
}
?t.test
bacteria = c(23.8, 26.2, 27.9, 22.2, 24.4, 25.8, 25.6, 29.1, 26.6, 26, 24.9, 23.3)
bacteria_t = t.test(bacteria, mu = 24, alternative = "two.sided")
bacteria_t
e^(-0.1 * 5)
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggdag")
install.packages("fixest")
### load libraries
library(tidyverse) ## for basic coding
library(data.table) ## for data manipulation
library(knitr) ## for rmarkdown
library(ggdag) ## for making a directed acyclic graph (DAG)
library(fixest) ## for fixed effects models
library(lme4) ## for regression models
### get rid of scientific notation
options(scipen = 999)
library(tidyverse)
library(vegan)
library(ggpubr)
library(broom)
library(AER)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
flowercounts = read_csv("../Scratch/blacksand_flowercounts_2020.ar.data.csv")
geumexclusions = read_csv("../Scratch/blacksand_geumexclusions_2020.ar.data.csv")
geumindividualvisits = read_csv("../Scratch/blacksand_geumindividualvisits_2020.ar.data.csv")
topography = read_csv("../Scratch/blacksand_topography_2020.ar.data.csv")
visitors = read_csv("../Scratch/blacksand_visitors_2020.ar.data.csv")
snowmelt = read_csv("../Scratch/snowmelt.csv")
# Clean snowmelt data to match pollinator data
names(snowmelt) = c("LTER", "site", "year", "treatment", "subplot", "melt_doy")
snowmelt$site = case_match(snowmelt$site, "East_Knoll" ~ "EastKnoll", .default = snowmelt$site)
snowmelt$subplot = case_match(snowmelt$subplot, "C"~"E", "B"~"C", .default = snowmelt$subplot)
View(topography)
# Bind snowmelt and pollinator data
combined = merge(pollinator_data_summary, topography, snowmelt, by = c("year", "subplot", "site", "treatment"), all.y = TRUE)
# ILLEGAL simulation of snowmelt day for the missing B and D subplots that were present
# in Rose-Person's data but missing from the ITEX snowmelt data. Need to find a better
# and responsible way to account for this.
simulated_snowmelt <- snowmelt %>%
# Group by site, year, and treatment for averaging
group_by(site, year, treatment) %>%
# Create rows for blocks B and D
summarise(
melt_doy_B = mean(melt_doy[subplot %in% c("A", "C")], na.rm = TRUE),
melt_doy_D = mean(melt_doy[subplot %in% c("C", "E")], na.rm = TRUE)
) %>%
# Reshape the data into the right format (replicate site, year, and treatment for B and D)
pivot_longer(cols = starts_with("melt_doy"), names_to = "subplot", values_to = "melt_doy") %>%
mutate(subplot = case_when(
subplot == "melt_doy_B" ~ "B",
subplot == "melt_doy_D" ~ "D",
TRUE ~ subplot
))
# Combine with the original data
snowmelt <- bind_rows(snowmelt, simulated_snowmelt)
# Collapse species observations into counts at each subplot grouped by date, site, treatment.
pollinator_data_summary <- visitors %>%
mutate(year = as.character(format(as.Date(date, format="%Y-%m-%d"), "%Y"))) %>%
group_by(year, site, subplot, treatment, visitor_nomenclature) %>%
summarise(visit_count = sum(visitornumber)) %>%
spread(key = visitor_nomenclature, value = visit_count, fill = 0)
head(pollinator_data_summary)
# Calculate alpha diversity
pollinator_data_summary$richness <- specnumber(pollinator_data_summary[,-c(1:4)])  # Excluding date, site, and subplot columns
# Calculate Simpson diversity
pollinator_data_summary$simpson_diversity <- diversity(pollinator_data_summary[,-c(1:4)], index = "simpson")
# Bind snowmelt and pollinator data
combined = merge(pollinator_data_summary, topography, snowmelt, by = c("year", "subplot", "site", "treatment"), all.y = TRUE)
simulated_snowmelt <- snowmelt %>%
# Group by site, year, and treatment for averaging
group_by(site, year, treatment) %>%
# Create rows for blocks B and D
summarise(
melt_doy_B = mean(melt_doy[subplot %in% c("A", "C")], na.rm = TRUE),
melt_doy_D = mean(melt_doy[subplot %in% c("C", "E")], na.rm = TRUE)
) %>%
# Reshape the data into the right format (replicate site, year, and treatment for B and D)
pivot_longer(cols = starts_with("melt_doy"), names_to = "subplot", values_to = "melt_doy") %>%
mutate(subplot = case_when(
subplot == "melt_doy_B" ~ "B",
subplot == "melt_doy_D" ~ "D",
TRUE ~ subplot
))
# Combine with the original data
snowmelt <- bind_rows(snowmelt, simulated_snowmelt)
# Collapse species observations into counts at each subplot grouped by date, site, treatment.
pollinator_data_summary <- visitors %>%
mutate(year = as.character(format(as.Date(date, format="%Y-%m-%d"), "%Y"))) %>%
group_by(year, site, subplot, treatment, visitor_nomenclature) %>%
summarise(visit_count = sum(visitornumber)) %>%
spread(key = visitor_nomenclature, value = visit_count, fill = 0)
# Calculate alpha diversity
pollinator_data_summary$richness <- specnumber(pollinator_data_summary[,-c(1:4)])  # Excluding date, site, and subplot columns
# Calculate Simpson diversity
pollinator_data_summary$simpson_diversity <- diversity(pollinator_data_summary[,-c(1:4)], index = "simpson")
# Bind snowmelt and pollinator data
combined = merge(pollinator_data_summary, topography, snowmelt, by = c("year", "subplot", "site", "treatment"), all.y = TRUE)
View(topography)
combined = merge(combined, topography, by = c("subplot", "site", "treatment"), all.y = TRUE)
combined = merge(pollinator_data_summary, snowmelt, by = c("year", "subplot", "site", "treatment"), all.y = TRUE)
combined = merge(combined, topography, by = c("subplot", "site", "treatment"), all.y = TRUE)
View(combined)
combined = select(combined, LTER, year, site, subplot, treatment, richness, simpson_diversity, melt_doy, slope, elevation, tpi3, tpi11, tpi31, everything())
# Default lm regressing treatment variable on IV and other relevant factors.
justify = lm(melt_doy ~ treatment + slope + elevation, data = snowmelt)
# Default lm regressing treatment variable on IV and other relevant factors.
justify = lm(melt_doy ~ treatment + slope + elevation, data = combined)
justify_ftest <- waldtest(justify, .~.-treatment)
print(justify_ftest)
# IVreg function
diversity_iv = combined %>%
ivreg(simpson_diversity ~ melt_doy + subplot + site | treatment +
subplot + site, data = .)
diversity_iv_est = coef(summary(diversity_iv))["melt_doy", "Estimate"]
# OLS Method
diversity_ols = combined %>%
lm(simpson_diversity ~ melt_doy + subplot + site, data = .)
diversity_ols_est = coef(summary(diversity_ols))["melt_doy", "Estimate"]
# Comparison of Methods
both_methods = data.frame(c("OLS", "IV"), c(diversity_ols_est, diversity_iv_est))
colnames(both_methods) = c("method", "estimate")
### Reshape the data
### Visualize distribution of estimates
ggplot(both_methods, aes(x = method, y = estimate)) +
geom_boxplot() +
theme_classic() +
ylim(0, 0.002) +
labs(y = "Estimated effect of snow melt doy",
x = "Estimation method")
combined$LTER = NULL
ggplot(combined[combined$year == "2020",], aes(x = site, y = simpson_diversity, fill = treatment)) +
geom_boxplot() +
labs(
title = "Simpson Diversity by Site in 2020",
x = "Site",
y = "Simpson Diversity Index"
) +
theme_minimal()
diversity_ols = combined %>%
lm(simpson_diversity ~ melt_doy + slope + elevation + tpi11, data = .)
diversity_ols_est = coef(summary(diversity_ols))["melt_doy", "Estimate"]
both_methods = data.frame(c("OLS", "IV"), c(diversity_ols_est, diversity_iv_est))
colnames(both_methods) = c("method", "estimate")
### Visualize distribution of estimates
ggplot(both_methods, aes(x = method, y = estimate)) +
geom_boxplot() +
theme_classic() +
ylim(0, 0.002) +
labs(y = "Estimated effect of snow melt doy",
x = "Estimation method")
View(both_methods)
# Default lm regressing treatment variable on IV and other relevant factors.
justify = lmer(melt_doy ~ treatment + (1 | subplot), data = combined)
library(lme4)
# Default lm regressing treatment variable on IV and other relevant factors.
justify = lmer(melt_doy ~ treatment + (1 | subplot), data = combined)
# Default lm regressing treatment variable on IV and other relevant factors.
justify = lmer(melt_doy ~ treatment + (treatment | subplot), data = combined)
# Default lm regressing treatment variable on IV and other relevant factors.
justify = lmer(melt_doy ~ treatment + (treatment | subplot), data = combined)
summary(justify)
justify = lmer(melt_doy ~ treatment + (1 | subplot), data = combined)
summary(justify)
library(lme4)
# Default lm regressing treatment variable on IV and other relevant factors.
justify_re = lmer(melt_doy ~ treatment + (1 | subplot), data = combined)
summary(justify_re)
head(combined)
ggplot(combined, aes(x = treatment, y = melt_doy, fill = treatment)) +
geom_boxplot() +
labs(title = "Snowmelt Day Comparison Between Control and Treatment",
x = "Treatment",
y = "Snowmelt Day of Year (melt_doy)") +
scale_fill_manual(values = c("control" = "blue", "treatment" = "red")) +  # Optional: choose your colors
theme_minimal() +
facet_wrap(~ site) +  # Create a separate subplot for each site
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(combined, aes(x = treatment, y = melt_doy, fill = treatment)) +
geom_boxplot() +
labs(title = "Snowmelt Day Comparison Between Control and Treatment",
x = "Treatment",
y = "Snowmelt Day of Year") +
scale_fill_manual(values = c("Control" = "blue", "Early" = "red")) +  # Optional: choose your colors
theme_minimal() +
facet_wrap(~ site) +  # Create a separate subplot for each site
ggplot(combined, aes(x = treatment, y = melt_doy, fill = treatment)) +
geom_boxplot() +
labs(title = "Snowmelt Day Comparison Between Control and Treatment",
x = "Treatment",
y = "Snowmelt Day of Year") +
scale_fill_manual(values = c("Control" = "blue", "Early" = "red")) +  # Optional: choose your colors
theme_minimal() +
facet_wrap(~ site) # Create a separate subplot for each site
snowmelt_effect = ggplot(combined, aes(x = treatment, y = melt_doy, fill = treatment)) +
geom_boxplot() +
labs(title = "Snowmelt Day Comparison Between Control and Treatment",
x = "Treatment",
y = "Snowmelt Day of Year") +
scale_fill_manual(values = c("Control" = "blue", "Early" = "red")) +  # Optional: choose your colors
theme_minimal() +
facet_wrap(~ site) # Create a separate subplot for each site
snowmelt_effect
snowmelt_effect = ggplot(combined, aes(x = treatment, y = melt_doy, fill = treatment)) +
geom_boxplot() +
labs(title = "Snowmelt Day Comparison Between Control and Treatment",
x = "Treatment",
y = "Snowmelt Day of Year") +
scale_fill_manual(values = c("Control" = "cyan", "Early" = "gray")) +  # Optional: choose your colors
theme_minimal() +
facet_wrap(~ site) # Create a separate subplot for each site
snowmelt_effect
# IVreg function
diversity_iv = ivreg(simpson_diversity ~ melt_doy + site | treatment +
subplot + site, data = combined)
diversity_iv_est = coef(summary(diversity_iv))["melt_doy", "Estimate"]
# OLS Method
diversity_ols = combined %>%
lm(simpson_diversity ~ melt_doy + slope + elevation + tpi11, data = .)
diversity_ols_est = coef(summary(diversity_ols))["melt_doy", "Estimate"]
# Comparison of Methods
both_methods = data.frame(c("OLS", "IV"), c(diversity_ols_est, diversity_iv_est))
colnames(both_methods) = c("method", "estimate")
diversity_iv = ivreg(simpson_diversity ~ melt_doy + slope + elevation + tpi31 | treatment +
subplot + site, data = combined)
summary(diversity_iv)
?ivreg
diversity_iv = ivreg(simpson_diversity ~ melt_doy + site | treatment +
subplot + site, data = combined)
?ivreg
summary(diversity_iv)
# IVreg function
diversity_iv = ivreg(simpson_diversity ~ melt_doy + slope + elevation + tpi31 + site | treatment +
subplot + site, data = combined)
summary(diversity_iv)
View(diversity_iv)
# IVreg function
diversity_iv = ivreg(simpson_diversity ~ melt_doy + site + subplot | treatment +
subplot + site, data = combined)
summary(diversity_iv)
# IVreg function
diversity_iv = ivreg(simpson_diversity ~ melt_doy + site + subplot | treatment +
subplot + site, data = combined)
diversity_iv_est = coef(summary(diversity_iv))["melt_doy", "Estimate"]
# OLS Method
diversity_ols = combined %>%
lm(simpson_diversity ~ melt_doy + slope + elevation + tpi11, data = .)
diversity_ols_est = coef(summary(diversity_ols))["melt_doy", "Estimate"]
# Comparison of Methods
both_methods = data.frame(c("OLS", "IV"), c(diversity_ols_est, diversity_iv_est))
colnames(both_methods) = c("method", "estimate")
both_methods
data <- read.csv(file.choose(),header=TRUE,na.string=".")
attach(data)
names(data)
data
data <- read.csv(file.choose(),header=TRUE,na.string=".")
attach(data)
names(data)
data
treatment1 <- c(Rest_TPR)
treatment2 <- c(Exer_TPR)
mean(treatment1)
mean(treatment2)
se <- function(x) {sd(x,na.rm=TRUE)/sqrt(length(x))}
se(treatment1)
se(treatment2)
t.test(treatment2,treatment1, paired=TRUE)
mean_treat1 <- mean(treatment1)
mean_treat2 <- mean(treatment2)
means <- c(mean_treat1,mean_treat2)
se <- function(x) {sd(x,na.rm=TRUE)/sqrt(length(x))}
se_treat1 <- se(treatment1)
se_treat2 <- se(treatment2)
standerrors <- c(se_treat1,se_treat2)
graph <- barplot(means,beside=T, ylab="Total Peripheral Resistance (mmHg*min/mL)",
names=c("Resting TPR","Exercise TPR"),
ylim=c(0, 0.03), col = c("tan","sienna4"))
arrows(graph,means-standerrors,graph,means+standerrors,code=3,angle=90,length=.1,lwd=1.3)
title(sub="Title", cex.sub=1.25)
mean_treat1 <- mean(treatment1)
mean_treat2 <- mean(treatment2)
means <- c(mean_treat1,mean_treat2)
se <- function(x) {sd(x,na.rm=TRUE)/sqrt(length(x))}
se_treat1 <- se(treatment1)
se_treat2 <- se(treatment2)
standerrors <- c(se_treat1,se_treat2)
graph <- barplot(means,beside=T, ylab="Total Peripheral Resistance (mmHg*min/mL)",
names=c("Resting TPR","Exercise TPR"),
ylim=c(0, 0.03), col = c("blue","pink"))
arrows(graph,means-standerrors,graph,means+standerrors,code=3,angle=90,length=.1,lwd=1.3)
title(sub="Change in TPR After Exercise", cex.sub=1.25)
